
InvRoboIRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800856c  0800856c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008574  08008574  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800857c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000094  08008610  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08008610  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c501  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a18  00000000  00000000  0003c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  0003ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00041608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024779  00000000  00000000  00042ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c4e  00000000  00000000  00067229  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2205  00000000  00000000  0007ae77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f30  00000000  00000000  0014d0f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008538 	.word	0x08008538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008538 	.word	0x08008538

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fd15 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f889 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9ef 	bl	80008b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f907 	bl	80006ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80004de:	f000 f933 	bl	8000748 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e2:	f000 f961 	bl	80007a8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e6:	f007 fc23 	bl	8007d30 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004ea:	f000 f993 	bl	8000814 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  htim2.Init.Period = 9;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <main+0x98>)
 80004f0:	2209      	movs	r2, #9
 80004f2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_TIM2_CLK_ENABLE();
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <main+0x9c>)
 80004fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <main+0x9c>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6413      	str	r3, [r2, #64]	; 0x40
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <main+0x9c>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	201c      	movs	r0, #28
 8000516:	f000 fe60 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800051a:	201c      	movs	r0, #28
 800051c:	f000 fe79 	bl	8001212 <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Init(&htim2);
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x98>)
 8000522:	f004 f915 	bl	8004750 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <main+0x98>)
 8000528:	f004 f947 	bl	80047ba <HAL_TIM_Base_Start_IT>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052c:	f007 fc26 	bl	8007d7c <MX_USB_HOST_Process>
    HAL_Delay(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f000 fd55 	bl	8000fe0 <HAL_Delay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 8000536:	2101      	movs	r1, #1
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0xa0>)
 800053a:	f001 f81f 	bl	800157c <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d1f3      	bne.n	800052c <main+0x64>
    	dutyCycle += 1;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <main+0xa4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0xa4>)
 800054c:	6013      	str	r3, [r2, #0]
    	if(dutyCycle >250){
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <main+0xa4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2bfa      	cmp	r3, #250	; 0xfa
 8000554:	ddea      	ble.n	800052c <main+0x64>
    		dutyCycle = 50;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <main+0xa4>)
 8000558:	2232      	movs	r2, #50	; 0x32
 800055a:	601a      	str	r2, [r3, #0]
    MX_USB_HOST_Process();
 800055c:	e7e6      	b.n	800052c <main+0x64>
 800055e:	bf00      	nop
 8000560:	20000174 	.word	0x20000174
 8000564:	40023800 	.word	0x40023800
 8000568:	40020000 	.word	0x40020000
 800056c:	20000000 	.word	0x20000000

08000570 <TIM2_IRQHandler>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void TIM2_IRQHandler(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <TIM2_IRQHandler+0x10>)
 8000576:	f004 f96f 	bl	8004858 <HAL_TIM_IRQHandler>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000174 	.word	0x20000174

08000584 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000594:	d11e      	bne.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x50>

		if(motorPeriod < dutyCycle){
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	da05      	bge.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x2a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2101      	movs	r1, #1
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005a8:	f001 f800 	bl	80015ac <HAL_GPIO_WritePin>
 80005ac:	e004      	b.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0x34>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2101      	movs	r1, #1
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005b4:	f000 fffa 	bl	80015ac <HAL_GPIO_WritePin>
		}

		motorPeriod++;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005c0:	6013      	str	r3, [r2, #0]
		if(motorPeriod >= 2200)
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f640 0297 	movw	r2, #2199	; 0x897
 80005ca:	4293      	cmp	r3, r2
 80005cc:	dd02      	ble.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x50>
			motorPeriod = 0;
 80005ce:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]

	}
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000b0 	.word	0x200000b0
 80005e0:	20000000 	.word	0x20000000
 80005e4:	40020400 	.word	0x40020400

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b098      	sub	sp, #96	; 0x60
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 fedc 	bl	80083b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <SystemClock_Config+0xfc>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <SystemClock_Config+0xfc>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <SystemClock_Config+0xfc>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0x100>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000666:	2308      	movs	r3, #8
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fa77 	bl	8003b70 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000688:	f000 fa26 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fcd0 	bl	8004050 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006b6:	f000 fa0f 	bl	8000ad8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006be:	23c0      	movs	r3, #192	; 0xc0
 80006c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fe9e 	bl	800440c <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006d6:	f000 f9ff 	bl	8000ad8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 fc49 	bl	8002fc0 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f9d0 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000c8 	.word	0x200000c8
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2S3_Init+0x54>)
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <MX_I2S3_Init+0x58>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_I2S3_Init+0x54>)
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <MX_I2S3_Init+0x5c>)
 8000772:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_I2S3_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2S3_Init+0x54>)
 8000788:	f002 fd52 	bl	8003230 <HAL_I2S_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000792:	f000 f9a1 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001b4 	.word	0x200001b4
 80007a0:	40003c00 	.word	0x40003c00
 80007a4:	00017700 	.word	0x00017700

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f003 ff45 	bl	8004688 <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 f968 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000011c 	.word	0x2000011c
 8000810:	40013000 	.word	0x40013000

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_TIM2_Init+0xa0>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_TIM2_Init+0xa0>)
 800083a:	2253      	movs	r2, #83	; 0x53
 800083c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM2_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_TIM2_Init+0xa0>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM2_Init+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM2_Init+0xa0>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000856:	4817      	ldr	r0, [pc, #92]	; (80008b4 <MX_TIM2_Init+0xa0>)
 8000858:	f003 ffd3 	bl	8004802 <HAL_TIM_IC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f939 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <MX_TIM2_Init+0xa0>)
 8000876:	f004 fb85 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f92a 	bl	8000ad8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_TIM2_Init+0xa0>)
 800089c:	f004 f8e4 	bl	8004a68 <HAL_TIM_IC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008a6:	f000 f917 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000174 	.word	0x20000174

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b7a      	ldr	r3, [pc, #488]	; (8000abc <MX_GPIO_Init+0x204>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a79      	ldr	r2, [pc, #484]	; (8000abc <MX_GPIO_Init+0x204>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b77      	ldr	r3, [pc, #476]	; (8000abc <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b73      	ldr	r3, [pc, #460]	; (8000abc <MX_GPIO_Init+0x204>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a72      	ldr	r2, [pc, #456]	; (8000abc <MX_GPIO_Init+0x204>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b70      	ldr	r3, [pc, #448]	; (8000abc <MX_GPIO_Init+0x204>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <MX_GPIO_Init+0x204>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6b      	ldr	r2, [pc, #428]	; (8000abc <MX_GPIO_Init+0x204>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b69      	ldr	r3, [pc, #420]	; (8000abc <MX_GPIO_Init+0x204>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <MX_GPIO_Init+0x204>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a64      	ldr	r2, [pc, #400]	; (8000abc <MX_GPIO_Init+0x204>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b62      	ldr	r3, [pc, #392]	; (8000abc <MX_GPIO_Init+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <MX_GPIO_Init+0x204>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5d      	ldr	r2, [pc, #372]	; (8000abc <MX_GPIO_Init+0x204>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b5b      	ldr	r3, [pc, #364]	; (8000abc <MX_GPIO_Init+0x204>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b57      	ldr	r3, [pc, #348]	; (8000abc <MX_GPIO_Init+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a56      	ldr	r2, [pc, #344]	; (8000abc <MX_GPIO_Init+0x204>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b54      	ldr	r3, [pc, #336]	; (8000abc <MX_GPIO_Init+0x204>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	4851      	ldr	r0, [pc, #324]	; (8000ac0 <MX_GPIO_Init+0x208>)
 800097c:	f000 fe16 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	484f      	ldr	r0, [pc, #316]	; (8000ac4 <MX_GPIO_Init+0x20c>)
 8000986:	f000 fe11 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	484e      	ldr	r0, [pc, #312]	; (8000ac8 <MX_GPIO_Init+0x210>)
 8000990:	f000 fe0c 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000994:	2200      	movs	r2, #0
 8000996:	f24f 0110 	movw	r1, #61456	; 0xf010
 800099a:	484c      	ldr	r0, [pc, #304]	; (8000acc <MX_GPIO_Init+0x214>)
 800099c:	f000 fe06 	bl	80015ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009a0:	2308      	movs	r3, #8
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4842      	ldr	r0, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x208>)
 80009b8:	f000 fc46 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	483c      	ldr	r0, [pc, #240]	; (8000ac4 <MX_GPIO_Init+0x20c>)
 80009d4:	f000 fc38 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d8:	2308      	movs	r3, #8
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e8:	2305      	movs	r3, #5
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4834      	ldr	r0, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0x20c>)
 80009f4:	f000 fc28 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x218>)
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4832      	ldr	r0, [pc, #200]	; (8000ad4 <MX_GPIO_Init+0x21c>)
 8000a0c:	f000 fc1c 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4828      	ldr	r0, [pc, #160]	; (8000ac8 <MX_GPIO_Init+0x210>)
 8000a28:	f000 fc0e 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x210>)
 8000a40:	f000 fc02 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a56:	2305      	movs	r3, #5
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <MX_GPIO_Init+0x210>)
 8000a62:	f000 fbf1 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a66:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a6a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_GPIO_Init+0x214>)
 8000a80:	f000 fbe2 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a84:	2320      	movs	r3, #32
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_GPIO_Init+0x214>)
 8000a98:	f000 fbd6 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_GPIO_Init+0x218>)
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_GPIO_Init+0x208>)
 8000ab0:	f000 fbca 	bl	8001248 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	10120000 	.word	0x10120000
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b26:	2007      	movs	r0, #7
 8000b28:	f000 fb4c 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_I2C_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12c      	bne.n	8000bb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b94:	f000 fb58 	bl	8001248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <HAL_I2S_MspInit+0xc0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d14a      	bne.n	8000c80 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_I2S_MspInit+0xc4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <HAL_I2S_MspInit+0xc8>)
 8000c5a:	f000 faf5 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c5e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c70:	2306      	movs	r3, #6
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <HAL_I2S_MspInit+0xcc>)
 8000c7c:	f000 fae4 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40003c00 	.word	0x40003c00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020800 	.word	0x40020800

08000c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_SPI_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cf2:	23e0      	movs	r3, #224	; 0xe0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d02:	2305      	movs	r3, #5
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_SPI_MspInit+0x8c>)
 8000d0e:	f000 fa9b 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013000 	.word	0x40013000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d12c      	bne.n	8000da4 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_TIM_IC_MspInit+0x84>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_TIM_IC_MspInit+0x84>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_TIM_IC_MspInit+0x84>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_TIM_IC_MspInit+0x84>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_TIM_IC_MspInit+0x84>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_TIM_IC_MspInit+0x84>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <HAL_TIM_IC_MspInit+0x88>)
 8000da0:	f000 fa52 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8ca 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f000 fe71 	bl	8001afc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200005d8 	.word	0x200005d8

08000e24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x50>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x16>
		heap_end = &end;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <_sbrk+0x50>)
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <_sbrk+0x54>)
 8000e38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <_sbrk+0x50>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <_sbrk+0x50>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	466a      	mov	r2, sp
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d907      	bls.n	8000e5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e4e:	f007 fa77 	bl	8008340 <__errno>
 8000e52:	4602      	mov	r2, r0
 8000e54:	230c      	movs	r3, #12
 8000e56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	e006      	b.n	8000e6c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <_sbrk+0x50>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <_sbrk+0x50>)
 8000e68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000b4 	.word	0x200000b4
 8000e78:	200008a0 	.word	0x200008a0

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x28>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <SystemInit+0x28>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SystemInit+0x28>)
 8000e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e96:	609a      	str	r2, [r3, #8]
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd3 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f007 fa39 	bl	800834c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff faf5 	bl	80004c8 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ee4:	0800857c 	.word	0x0800857c
  ldr  r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eec:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000ef0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000ef4:	200008a0 	.word	0x200008a0

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f94d 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fdda 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f965 	bl	800122e <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f92d 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	200001fc 	.word	0x200001fc

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001fc 	.word	0x200001fc

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_Delay+0x40>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000000c 	.word	0x2000000c

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e16b      	b.n	800153c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 815a 	bne.w	8001536 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d00b      	beq.n	80012a2 <HAL_GPIO_Init+0x5a>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001296:	2b11      	cmp	r3, #17
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d130      	bne.n	8001304 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 0201 	and.w	r2, r3, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0xfc>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80b4 	beq.w	8001536 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_GPIO_Init+0x308>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_GPIO_Init+0x308>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_GPIO_Init+0x308>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <HAL_GPIO_Init+0x30c>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a51      	ldr	r2, [pc, #324]	; (8001558 <HAL_GPIO_Init+0x310>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x226>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a50      	ldr	r2, [pc, #320]	; (800155c <HAL_GPIO_Init+0x314>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x222>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_GPIO_Init+0x318>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x21e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_GPIO_Init+0x31c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x21a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <HAL_GPIO_Init+0x320>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x216>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_GPIO_Init+0x324>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x212>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <HAL_GPIO_Init+0x328>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x20e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <HAL_GPIO_Init+0x32c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x20a>
 800144e:	2307      	movs	r3, #7
 8001450:	e00e      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001452:	2308      	movs	r3, #8
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001456:	2306      	movs	r3, #6
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4934      	ldr	r1, [pc, #208]	; (8001554 <HAL_GPIO_Init+0x30c>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_GPIO_Init+0x330>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <HAL_GPIO_Init+0x330>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_GPIO_Init+0x330>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014dc:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_GPIO_Init+0x330>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_GPIO_Init+0x330>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <HAL_GPIO_Init+0x330>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_GPIO_Init+0x330>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_GPIO_Init+0x330>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f ae90 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	3724      	adds	r7, #36	; 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40023800 	.word	0x40023800
 8001554:	40013800 	.word	0x40013800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40021000 	.word	0x40021000
 800156c:	40021400 	.word	0x40021400
 8001570:	40021800 	.word	0x40021800
 8001574:	40021c00 	.word	0x40021c00
 8001578:	40013c00 	.word	0x40013c00

0800157c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e0:	b08f      	sub	sp, #60	; 0x3c
 80015e2:	af0a      	add	r7, sp, #40	; 0x28
 80015e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e054      	b.n	800169a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f006 fbee 	bl	8007dec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2203      	movs	r2, #3
 8001614:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fdaa 	bl	8005188 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	687e      	ldr	r6, [r7, #4]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800164e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001652:	1d33      	adds	r3, r6, #4
 8001654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f003 fd24 	bl	80050a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fda1 	bl	80051aa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	687e      	ldr	r6, [r7, #4]
 8001670:	466d      	mov	r5, sp
 8001672:	f106 0410 	add.w	r4, r6, #16
 8001676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001682:	e885 0003 	stmia.w	r5, {r0, r1}
 8001686:	1d33      	adds	r3, r6, #4
 8001688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f003 feb4 	bl	80053f8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016a2:	b590      	push	{r4, r7, lr}
 80016a4:	b089      	sub	sp, #36	; 0x24
 80016a6:	af04      	add	r7, sp, #16
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	70fb      	strb	r3, [r7, #3]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70bb      	strb	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_HCD_HC_Init+0x28>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e07f      	b.n	80017ca <HAL_HCD_HC_Init+0x128>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	333d      	adds	r3, #61	; 0x3d
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	3338      	adds	r3, #56	; 0x38
 80016f6:	787a      	ldrb	r2, [r7, #1]
 80016f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3340      	adds	r3, #64	; 0x40
 800170a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800170c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3339      	adds	r3, #57	; 0x39
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	333f      	adds	r3, #63	; 0x3f
 8001732:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	78bb      	ldrb	r3, [r7, #2]
 800173c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001740:	b2d8      	uxtb	r0, r3
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	333a      	adds	r3, #58	; 0x3a
 8001750:	4602      	mov	r2, r0
 8001752:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001758:	2b00      	cmp	r3, #0
 800175a:	da0a      	bge.n	8001772 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	333b      	adds	r3, #59	; 0x3b
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e009      	b.n	8001786 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	333b      	adds	r3, #59	; 0x3b
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	333c      	adds	r3, #60	; 0x3c
 8001796:	f897 2020 	ldrb.w	r2, [r7, #32]
 800179a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	787c      	ldrb	r4, [r7, #1]
 80017a2:	78ba      	ldrb	r2, [r7, #2]
 80017a4:	78f9      	ldrb	r1, [r7, #3]
 80017a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4623      	mov	r3, r4
 80017b8:	f003 ffa0 	bl	80056fc <USB_HC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}

080017d2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_HCD_HC_Halt+0x1e>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e00f      	b.n	8001810 <HAL_HCD_HC_Halt+0x3e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f004 f9dc 	bl	8005bbe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	70fb      	strb	r3, [r7, #3]
 800182a:	460b      	mov	r3, r1
 800182c:	70bb      	strb	r3, [r7, #2]
 800182e:	4613      	mov	r3, r2
 8001830:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	333b      	adds	r3, #59	; 0x3b
 8001842:	78ba      	ldrb	r2, [r7, #2]
 8001844:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	333f      	adds	r3, #63	; 0x3f
 8001856:	787a      	ldrb	r2, [r7, #1]
 8001858:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800185a:	7c3b      	ldrb	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d114      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3342      	adds	r3, #66	; 0x42
 8001870:	2203      	movs	r2, #3
 8001872:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	333d      	adds	r3, #61	; 0x3d
 8001884:	7f3a      	ldrb	r2, [r7, #28]
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e009      	b.n	800189e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800189e:	787b      	ldrb	r3, [r7, #1]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	f200 80d6 	bhi.w	8001a52 <HAL_HCD_HC_SubmitRequest+0x23a>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	08001a3d 	.word	0x08001a3d
 80018b4:	08001929 	.word	0x08001929
 80018b8:	080019b3 	.word	0x080019b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	f040 80c9 	bne.w	8001a56 <HAL_HCD_HC_SubmitRequest+0x23e>
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80c5 	bne.w	8001a56 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80018cc:	8b3b      	ldrh	r3, [r7, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3351      	adds	r3, #81	; 0x51
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3351      	adds	r3, #81	; 0x51
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10a      	bne.n	8001912 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	3342      	adds	r3, #66	; 0x42
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001910:	e0a1      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	3342      	adds	r3, #66	; 0x42
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e096      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001928:	78bb      	ldrb	r3, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d120      	bne.n	8001970 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	3351      	adds	r3, #81	; 0x51
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10a      	bne.n	800195a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3342      	adds	r3, #66	; 0x42
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001958:	e07e      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	3342      	adds	r3, #66	; 0x42
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
      break;
 800196e:	e073      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3350      	adds	r3, #80	; 0x50
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10a      	bne.n	800199c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e05d      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3342      	adds	r3, #66	; 0x42
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e052      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019b2:	78bb      	ldrb	r3, [r7, #2]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d120      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3351      	adds	r3, #81	; 0x51
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019e2:	e039      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3342      	adds	r3, #66	; 0x42
 80019f4:	2202      	movs	r2, #2
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e02e      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3350      	adds	r3, #80	; 0x50
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3342      	adds	r3, #66	; 0x42
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e018      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3342      	adds	r3, #66	; 0x42
 8001a36:	2202      	movs	r2, #2
 8001a38:	701a      	strb	r2, [r3, #0]
      break;
 8001a3a:	e00d      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3342      	adds	r3, #66	; 0x42
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
      break;
 8001a50:	e002      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001a56:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3344      	adds	r3, #68	; 0x44
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	8b39      	ldrh	r1, [r7, #24]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4403      	add	r3, r0
 8001a7c:	3348      	adds	r3, #72	; 0x48
 8001a7e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	335c      	adds	r3, #92	; 0x5c
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	334c      	adds	r3, #76	; 0x4c
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3339      	adds	r3, #57	; 0x39
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	335d      	adds	r3, #93	; 0x5d
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	18d1      	adds	r1, r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	f003 ff10 	bl	8005910 <USB_HC_StartXfer>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fc2d 	bl	8005372 <USB_GetMode>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	f040 80ef 	bne.w	8001cfe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fc11 	bl	800534c <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80e5 	beq.w	8001cfc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fc08 	bl	800534c <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b46:	d104      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fbf8 	bl	800534c <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b66:	d104      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fbe8 	bl	800534c <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b86:	d104      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fbd8 	bl	800534c <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d103      	bne.n	8001bae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fbca 	bl	800534c <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bc2:	d115      	bne.n	8001bf0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bcc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d108      	bne.n	8001bf0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f006 f982 	bl	8007ee8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fcc0 	bl	8005570 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fba9 	bl	800534c <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d102      	bne.n	8001c0c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f001 f966 	bl	8002ed8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fb9b 	bl	800534c <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d106      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f006 f945 	bl	8007eb0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fb8a 	bl	800534c <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c42:	d138      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 ffa7 	bl	8005b9c <USB_HC_ReadInterrupt>
 8001c4e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e025      	b.n	8001ca2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d018      	beq.n	8001c9c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c80:	d106      	bne.n	8001c90 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8cf 	bl	8001e2c <HCD_HC_IN_IRQHandler>
 8001c8e:	e005      	b.n	8001c9c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fcfd 	bl	8002696 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3d4      	bcc.n	8001c56 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fb46 	bl	800534c <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d101      	bne.n	8001cce <HAL_HCD_IRQHandler+0x1d2>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_HCD_IRQHandler+0x1d4>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d014      	beq.n	8001cfe <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0210 	bic.w	r2, r2, #16
 8001ce2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f001 f84b 	bl	8002d80 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699a      	ldr	r2, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0210 	orr.w	r2, r2, #16
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	e000      	b.n	8001cfe <HAL_HCD_IRQHandler+0x202>
      return;
 8001cfc:	bf00      	nop
    }
  }
}
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_HCD_Start+0x16>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e013      	b.n	8001d42 <HAL_HCD_Start+0x3e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fa1d 	bl	8005166 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fc80 	bl	8005638 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_HCD_Stop+0x16>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e00d      	b.n	8001d7c <HAL_HCD_Stop+0x32>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 f861 	bl	8005e34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fc27 	bl	80055e4 <USB_ResetPort>
 8001d96:	4603      	mov	r3, r0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	335c      	adds	r3, #92	; 0x5c
 8001dbc:	781b      	ldrb	r3, [r3, #0]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	334c      	adds	r3, #76	; 0x4c
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fc69 	bl	80056d8 <USB_GetCurrentFrame>
 8001e06:	4603      	mov	r3, r0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fc44 	bl	80056aa <USB_GetHostSpeed>
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d119      	bne.n	8001e90 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	0151      	lsls	r1, r2, #5
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	440a      	add	r2, r1
 8001e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	60d3      	str	r3, [r2, #12]
 8001e8e:	e0ce      	b.n	800202e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea6:	d12c      	bne.n	8001f02 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	335d      	adds	r3, #93	; 0x5d
 8001ecc:	2207      	movs	r2, #7
 8001ece:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	0151      	lsls	r1, r2, #5
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	440a      	add	r2, r1
 8001ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fe5f 	bl	8005bbe <USB_HC_Halt>
 8001f00:	e095      	b.n	800202e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d109      	bne.n	8001f2c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2320      	movs	r3, #32
 8001f28:	6093      	str	r3, [r2, #8]
 8001f2a:	e080      	b.n	800202e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d134      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	0151      	lsls	r1, r2, #5
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	440a      	add	r2, r1
 8001f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	335d      	adds	r3, #93	; 0x5d
 8001f72:	2205      	movs	r2, #5
 8001f74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	2310      	movs	r3, #16
 8001f86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2308      	movs	r3, #8
 8001f98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fe0a 	bl	8005bbe <USB_HC_Halt>
 8001faa:	e040      	b.n	800202e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d134      	bne.n	800202e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	0151      	lsls	r1, r2, #5
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	440a      	add	r2, r1
 8001fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fde5 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2310      	movs	r3, #16
 8002004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	335d      	adds	r3, #93	; 0x5d
 8002016:	2208      	movs	r2, #8
 8002018:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	461a      	mov	r2, r3
 8002028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	d122      	bne.n	800208c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	0151      	lsls	r1, r2, #5
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	440a      	add	r2, r1
 800205c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fda4 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	461a      	mov	r2, r3
 8002084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002088:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800208a:	e300      	b.n	800268e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	f040 80fd 	bne.w	800229e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3348      	adds	r3, #72	; 0x48
 80020bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	0159      	lsls	r1, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020d0:	1ad1      	subs	r1, r2, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4403      	add	r3, r0
 80020e0:	334c      	adds	r3, #76	; 0x4c
 80020e2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	335d      	adds	r3, #93	; 0x5d
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3358      	adds	r3, #88	; 0x58
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	2301      	movs	r3, #1
 800211c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	333f      	adds	r3, #63	; 0x3f
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	333f      	adds	r3, #63	; 0x3f
 8002144:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002146:	2b02      	cmp	r3, #2
 8002148:	d121      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	0151      	lsls	r1, r2, #5
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	440a      	add	r2, r1
 8002160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fd22 	bl	8005bbe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	461a      	mov	r2, r3
 8002188:	2310      	movs	r3, #16
 800218a:	6093      	str	r3, [r2, #8]
 800218c:	e070      	b.n	8002270 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	333f      	adds	r3, #63	; 0x3f
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d12a      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	0151      	lsls	r1, r2, #5
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	440a      	add	r2, r1
 80021ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	b2d8      	uxtb	r0, r3
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	335c      	adds	r3, #92	; 0x5c
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4601      	mov	r1, r0
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 fe86 	bl	8007f04 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021f8:	e03a      	b.n	8002270 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	333f      	adds	r3, #63	; 0x3f
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d12f      	bne.n	8002270 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	335c      	adds	r3, #92	; 0x5c
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3350      	adds	r3, #80	; 0x50
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2d8      	uxtb	r0, r3
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3350      	adds	r3, #80	; 0x50
 800224c:	4602      	mov	r2, r0
 800224e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	b2d8      	uxtb	r0, r3
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	4601      	mov	r1, r0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 fe4a 	bl	8007f04 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3350      	adds	r3, #80	; 0x50
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3350      	adds	r3, #80	; 0x50
 8002298:	4602      	mov	r2, r0
 800229a:	701a      	strb	r2, [r3, #0]
}
 800229c:	e1f7      	b.n	800268e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	f040 811a 	bne.w	80024ea <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d0:	f023 0302 	bic.w	r3, r3, #2
 80022d4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	335d      	adds	r3, #93	; 0x5d
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10a      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	335c      	adds	r3, #92	; 0x5c
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e0d9      	b.n	80024b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	335d      	adds	r3, #93	; 0x5d
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d10a      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	335c      	adds	r3, #92	; 0x5c
 8002328:	2205      	movs	r2, #5
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e0c3      	b.n	80024b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	335d      	adds	r3, #93	; 0x5d
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b06      	cmp	r3, #6
 8002342:	d00a      	beq.n	800235a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	335d      	adds	r3, #93	; 0x5d
 8002354:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002356:	2b08      	cmp	r3, #8
 8002358:	d156      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3358      	adds	r3, #88	; 0x58
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c59      	adds	r1, r3, #1
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4403      	add	r3, r0
 800237c:	3358      	adds	r3, #88	; 0x58
 800237e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3358      	adds	r3, #88	; 0x58
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d914      	bls.n	80023c0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	3358      	adds	r3, #88	; 0x58
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	335c      	adds	r3, #92	; 0x5c
 80023ba:	2204      	movs	r2, #4
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e009      	b.n	80023d4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	335c      	adds	r3, #92	; 0x5c
 80023d0:	2202      	movs	r2, #2
 80023d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e056      	b.n	80024b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	335d      	adds	r3, #93	; 0x5d
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d123      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	335c      	adds	r3, #92	; 0x5c
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002448:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002450:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e027      	b.n	80024b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	335d      	adds	r3, #93	; 0x5d
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b07      	cmp	r3, #7
 800247a:	d11c      	bne.n	80024b6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	3358      	adds	r3, #88	; 0x58
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4403      	add	r3, r0
 800249e:	3358      	adds	r3, #88	; 0x58
 80024a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	335c      	adds	r3, #92	; 0x5c
 80024b2:	2204      	movs	r2, #4
 80024b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	2302      	movs	r3, #2
 80024c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	b2d8      	uxtb	r0, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	335c      	adds	r3, #92	; 0x5c
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4601      	mov	r1, r0
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f005 fd0e 	bl	8007f04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024e8:	e0d1      	b.n	800268e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d13e      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	0151      	lsls	r1, r2, #5
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	440a      	add	r2, r1
 8002516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3358      	adds	r3, #88	; 0x58
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1c59      	adds	r1, r3, #1
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4403      	add	r3, r0
 8002542:	3358      	adds	r3, #88	; 0x58
 8002544:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335d      	adds	r3, #93	; 0x5d
 8002556:	2206      	movs	r2, #6
 8002558:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f003 fb2a 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	6093      	str	r3, [r2, #8]
}
 800257c:	e087      	b.n	800268e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b10      	cmp	r3, #16
 8002592:	d17c      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	333f      	adds	r3, #63	; 0x3f
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d122      	bne.n	80025f0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	3358      	adds	r3, #88	; 0x58
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fae8 	bl	8005bbe <USB_HC_Halt>
 80025ee:	e045      	b.n	800267c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	333f      	adds	r3, #63	; 0x3f
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	333f      	adds	r3, #63	; 0x3f
 8002616:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002618:	2b02      	cmp	r3, #2
 800261a:	d12f      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	3358      	adds	r3, #88	; 0x58
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d121      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	335d      	adds	r3, #93	; 0x5d
 8002648:	2203      	movs	r2, #3
 800264a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	0151      	lsls	r1, r2, #5
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	440a      	add	r2, r1
 8002662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 faa1 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	2310      	movs	r3, #16
 800268c:	6093      	str	r3, [r2, #8]
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d119      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2304      	movs	r3, #4
 80026d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026f8:	e33e      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b20      	cmp	r3, #32
 800270e:	d141      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2320      	movs	r3, #32
 8002720:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	333d      	adds	r3, #61	; 0x3d
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 831f 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	333d      	adds	r3, #61	; 0x3d
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	335c      	adds	r3, #92	; 0x5c
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	440a      	add	r2, r1
 8002778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fa16 	bl	8005bbe <USB_HC_Halt>
}
 8002792:	e2f1      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	d13f      	bne.n	800282a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	335d      	adds	r3, #93	; 0x5d
 80027ba:	2204      	movs	r2, #4
 80027bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	333d      	adds	r3, #61	; 0x3d
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3358      	adds	r3, #88	; 0x58
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	0151      	lsls	r1, r2, #5
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	440a      	add	r2, r1
 80027fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f003 f9d4 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	2340      	movs	r3, #64	; 0x40
 8002826:	6093      	str	r3, [r2, #8]
}
 8002828:	e2a6      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d122      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	0151      	lsls	r1, r2, #5
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	440a      	add	r2, r1
 8002858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f003 f9a6 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	6093      	str	r3, [r2, #8]
}
 8002886:	e277      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d135      	bne.n	800290a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	3358      	adds	r3, #88	; 0x58
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	0151      	lsls	r1, r2, #5
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	440a      	add	r2, r1
 80028c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f96e 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	2301      	movs	r3, #1
 80028f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	335d      	adds	r3, #93	; 0x5d
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
}
 8002908:	e236      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d12b      	bne.n	8002978 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2308      	movs	r3, #8
 8002930:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	0151      	lsls	r1, r2, #5
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	440a      	add	r2, r1
 8002948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f003 f92e 	bl	8005bbe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	335d      	adds	r3, #93	; 0x5d
 8002972:	2205      	movs	r2, #5
 8002974:	701a      	strb	r2, [r3, #0]
}
 8002976:	e1ff      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b10      	cmp	r3, #16
 800298c:	d155      	bne.n	8002a3a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3358      	adds	r3, #88	; 0x58
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	335d      	adds	r3, #93	; 0x5d
 80029b2:	2203      	movs	r2, #3
 80029b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	333d      	adds	r3, #61	; 0x3d
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d114      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	333c      	adds	r3, #60	; 0x3c
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	333d      	adds	r3, #61	; 0x3d
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 f8cc 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2310      	movs	r3, #16
 8002a36:	6093      	str	r3, [r2, #8]
}
 8002a38:	e19e      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d12b      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	0151      	lsls	r1, r2, #5
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	440a      	add	r2, r1
 8002a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 f89f 	bl	8005bbe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	335d      	adds	r3, #93	; 0x5d
 8002a90:	2206      	movs	r2, #6
 8002a92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	6093      	str	r3, [r2, #8]
}
 8002aa6:	e167      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abe:	d135      	bne.n	8002b2c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 f867 	bl	8005bbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2310      	movs	r3, #16
 8002b00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	335d      	adds	r3, #93	; 0x5d
 8002b26:	2208      	movs	r2, #8
 8002b28:	701a      	strb	r2, [r3, #0]
}
 8002b2a:	e125      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	f040 811a 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5e:	f023 0302 	bic.w	r3, r3, #2
 8002b62:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	335d      	adds	r3, #93	; 0x5d
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d137      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	333f      	adds	r3, #63	; 0x3f
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d00b      	beq.n	8002bbc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	333f      	adds	r3, #63	; 0x3f
 8002bb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	f040 80c5 	bne.w	8002d46 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	3351      	adds	r3, #81	; 0x51
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	3351      	adds	r3, #81	; 0x51
 8002be4:	4602      	mov	r2, r0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e0ad      	b.n	8002d46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335d      	adds	r3, #93	; 0x5d
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d10a      	bne.n	8002c16 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	335c      	adds	r3, #92	; 0x5c
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e097      	b.n	8002d46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	335d      	adds	r3, #93	; 0x5d
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d10a      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e081      	b.n	8002d46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	335d      	adds	r3, #93	; 0x5d
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d10a      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	335c      	adds	r3, #92	; 0x5c
 8002c68:	2205      	movs	r2, #5
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e06b      	b.n	8002d46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	335d      	adds	r3, #93	; 0x5d
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d00a      	beq.n	8002c9a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	335d      	adds	r3, #93	; 0x5d
 8002c94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d155      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3358      	adds	r3, #88	; 0x58
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4403      	add	r3, r0
 8002cbc:	3358      	adds	r3, #88	; 0x58
 8002cbe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	3358      	adds	r3, #88	; 0x58
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d914      	bls.n	8002d00 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3358      	adds	r3, #88	; 0x58
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	335c      	adds	r3, #92	; 0x5c
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e009      	b.n	8002d14 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	2202      	movs	r2, #2
 8002d12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	2302      	movs	r3, #2
 8002d56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	b2d8      	uxtb	r0, r3
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	335c      	adds	r3, #92	; 0x5c
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4601      	mov	r1, r0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f005 f8c6 	bl	8007f04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	0c5b      	lsrs	r3, r3, #17
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d003      	beq.n	8002dc4 <HCD_RXQLVL_IRQHandler+0x44>
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	f000 8082 	beq.w	8002ec6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dc2:	e083      	b.n	8002ecc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d07f      	beq.n	8002eca <HCD_RXQLVL_IRQHandler+0x14a>
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3344      	adds	r3, #68	; 0x44
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d074      	beq.n	8002eca <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3344      	adds	r3, #68	; 0x44
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f002 fa7d 	bl	80052fa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3344      	adds	r3, #68	; 0x44
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	18d1      	adds	r1, r2, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4403      	add	r3, r0
 8002e24:	3344      	adds	r3, #68	; 0x44
 8002e26:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	334c      	adds	r3, #76	; 0x4c
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	18d1      	adds	r1, r2, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4403      	add	r3, r0
 8002e4c:	334c      	adds	r3, #76	; 0x4c
 8002e4e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d031      	beq.n	8002eca <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e84:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3350      	adds	r3, #80	; 0x50
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2d8      	uxtb	r0, r3
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3350      	adds	r3, #80	; 0x50
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	701a      	strb	r2, [r3, #0]
      break;
 8002ec4:	e001      	b.n	8002eca <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002eca:	bf00      	nop
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	1ff80000 	.word	0x1ff80000

08002ed8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d10b      	bne.n	8002f28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f004 ffd6 	bl	8007ecc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d132      	bne.n	8002f98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d126      	bne.n	8002f92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d113      	bne.n	8002f74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f56:	d106      	bne.n	8002f66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 fb06 	bl	8005570 <USB_InitFSLSPClkSel>
 8002f64:	e011      	b.n	8002f8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 faff 	bl	8005570 <USB_InitFSLSPClkSel>
 8002f72:	e00a      	b.n	8002f8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f82:	461a      	mov	r2, r3
 8002f84:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f004 ffc8 	bl	8007f20 <HAL_HCD_PortEnabled_Callback>
 8002f90:	e002      	b.n	8002f98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f004 ffd2 	bl	8007f3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d103      	bne.n	8002faa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6013      	str	r3, [r2, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e11f      	b.n	8003212 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fda6 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003024:	f001 f9de 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4a7b      	ldr	r2, [pc, #492]	; (800321c <HAL_I2C_Init+0x25c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d807      	bhi.n	8003044 <HAL_I2C_Init+0x84>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a7a      	ldr	r2, [pc, #488]	; (8003220 <HAL_I2C_Init+0x260>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e006      	b.n	8003052 <HAL_I2C_Init+0x92>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_I2C_Init+0x264>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0db      	b.n	8003212 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a72      	ldr	r2, [pc, #456]	; (8003228 <HAL_I2C_Init+0x268>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9b      	lsrs	r3, r3, #18
 8003064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a64      	ldr	r2, [pc, #400]	; (800321c <HAL_I2C_Init+0x25c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d802      	bhi.n	8003094 <HAL_I2C_Init+0xd4>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	e009      	b.n	80030a8 <HAL_I2C_Init+0xe8>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a63      	ldr	r2, [pc, #396]	; (800322c <HAL_I2C_Init+0x26c>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3301      	adds	r3, #1
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4956      	ldr	r1, [pc, #344]	; (800321c <HAL_I2C_Init+0x25c>)
 80030c4:	428b      	cmp	r3, r1
 80030c6:	d80d      	bhi.n	80030e4 <HAL_I2C_Init+0x124>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e59      	subs	r1, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b04      	cmp	r3, #4
 80030de:	bf38      	it	cc
 80030e0:	2304      	movcc	r3, #4
 80030e2:	e04f      	b.n	8003184 <HAL_I2C_Init+0x1c4>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_I2C_Init+0x150>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e012      	b.n	8003136 <HAL_I2C_Init+0x176>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	0099      	lsls	r1, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x17e>
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_I2C_Init+0x1c4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10e      	bne.n	8003164 <HAL_I2C_Init+0x1a4>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	fbb0 f3f3 	udiv	r3, r0, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Init+0x1c4>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6911      	ldr	r1, [r2, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000186a0 	.word	0x000186a0
 8003220:	001e847f 	.word	0x001e847f
 8003224:	003d08ff 	.word	0x003d08ff
 8003228:	431bde83 	.word	0x431bde83
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e128      	b.n	8003494 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a90      	ldr	r2, [pc, #576]	; (800349c <HAL_I2S_Init+0x26c>)
 800325a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd fcb3 	bl	8000bc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003278:	f023 030f 	bic.w	r3, r3, #15
 800327c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d060      	beq.n	8003350 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003296:	2310      	movs	r3, #16
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e001      	b.n	80032a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d802      	bhi.n	80032ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f001 f98e 	bl	80045d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80032b4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d125      	bne.n	800330c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	3305      	adds	r3, #5
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e01f      	b.n	800332a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	461a      	mov	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	3305      	adds	r3, #5
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e00e      	b.n	800332a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	3305      	adds	r3, #5
 8003328:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <HAL_I2S_Init+0x270>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	08db      	lsrs	r3, r3, #3
 8003334:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e003      	b.n	8003358 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003350:	2302      	movs	r3, #2
 8003352:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d902      	bls.n	8003364 <HAL_I2S_Init+0x134>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2bff      	cmp	r3, #255	; 0xff
 8003362:	d907      	bls.n	8003374 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e08f      	b.n	8003494 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	ea42 0103 	orr.w	r1, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	430a      	orrs	r2, r1
 8003386:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003392:	f023 030f 	bic.w	r3, r3, #15
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6851      	ldr	r1, [r2, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6892      	ldr	r2, [r2, #8]
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68d2      	ldr	r2, [r2, #12]
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6992      	ldr	r2, [r2, #24]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d161      	bne.n	8003484 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a38      	ldr	r2, [pc, #224]	; (80034a4 <HAL_I2S_Init+0x274>)
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_I2S_Init+0x278>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_I2S_Init+0x1a4>
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <HAL_I2S_Init+0x27c>)
 80033d2:	e001      	b.n	80033d8 <HAL_I2S_Init+0x1a8>
 80033d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	4932      	ldr	r1, [pc, #200]	; (80034a8 <HAL_I2S_Init+0x278>)
 80033e0:	428a      	cmp	r2, r1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2S_Init+0x1b8>
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_I2S_Init+0x27c>)
 80033e6:	e001      	b.n	80033ec <HAL_I2S_Init+0x1bc>
 80033e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033f0:	f023 030f 	bic.w	r3, r3, #15
 80033f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <HAL_I2S_Init+0x278>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_I2S_Init+0x1d4>
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_I2S_Init+0x27c>)
 8003402:	e001      	b.n	8003408 <HAL_I2S_Init+0x1d8>
 8003404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003408:	2202      	movs	r2, #2
 800340a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <HAL_I2S_Init+0x278>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_I2S_Init+0x1ea>
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_I2S_Init+0x27c>)
 8003418:	e001      	b.n	800341e <HAL_I2S_Init+0x1ee>
 800341a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342a:	d003      	beq.n	8003434 <HAL_I2S_Init+0x204>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e001      	b.n	8003440 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	b299      	uxth	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003456:	4303      	orrs	r3, r0
 8003458:	b29b      	uxth	r3, r3
 800345a:	430b      	orrs	r3, r1
 800345c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800345e:	4313      	orrs	r3, r2
 8003460:	b29a      	uxth	r2, r3
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	4313      	orrs	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800346c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_I2S_Init+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_I2S_Init+0x24c>
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_I2S_Init+0x27c>)
 800347a:	e001      	b.n	8003480 <HAL_I2S_Init+0x250>
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	897a      	ldrh	r2, [r7, #10]
 8003482:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	080035a7 	.word	0x080035a7
 80034a0:	cccccccd 	.word	0xcccccccd
 80034a4:	080036bd 	.word	0x080036bd
 80034a8:	40003800 	.word	0x40003800
 80034ac:	40003400 	.word	0x40003400

080034b0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10e      	bne.n	8003540 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003530:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffb8 	bl	80034b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	b292      	uxth	r2, r2
 800355c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	1c9a      	adds	r2, r3, #2
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10e      	bne.n	800359e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800358e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff93 	bl	80034c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d13a      	bne.n	8003638 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d109      	bne.n	80035e0 <I2S_IRQHandler+0x3a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d102      	bne.n	80035e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffb4 	bl	8003548 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d126      	bne.n	8003638 <I2S_IRQHandler+0x92>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d11f      	bne.n	8003638 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003606:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ff50 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b03      	cmp	r3, #3
 8003642:	d136      	bne.n	80036b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d109      	bne.n	8003662 <I2S_IRQHandler+0xbc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d102      	bne.n	8003662 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff45 	bl	80034ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b08      	cmp	r3, #8
 800366a:	d122      	bne.n	80036b2 <I2S_IRQHandler+0x10c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b20      	cmp	r3, #32
 8003678:	d11b      	bne.n	80036b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003688:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff13 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4aa2      	ldr	r2, [pc, #648]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036d6:	4ba2      	ldr	r3, [pc, #648]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036d8:	e001      	b.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a9b      	ldr	r2, [pc, #620]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036f4:	4b9a      	ldr	r3, [pc, #616]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036f6:	e001      	b.n	80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d004      	beq.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8099 	bne.w	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d107      	bne.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f925 	bl	8003978 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9c8 	bl	8003ad8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d13a      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d035      	beq.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7e      	ldr	r2, [pc, #504]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003766:	4b7e      	ldr	r3, [pc, #504]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003768:	e001      	b.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800376a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4979      	ldr	r1, [pc, #484]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003776:	428b      	cmp	r3, r1
 8003778:	d101      	bne.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800377a:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800377c:	e001      	b.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800377e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003786:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003796:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fe88 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	f040 80be 	bne.w	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80b8 	beq.w	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a59      	ldr	r2, [pc, #356]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037fa:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037fc:	e001      	b.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4954      	ldr	r1, [pc, #336]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800380a:	428b      	cmp	r3, r1
 800380c:	d101      	bne.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800380e:	4b54      	ldr	r3, [pc, #336]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003810:	e001      	b.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fe4a 	bl	80034d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003844:	e084      	b.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d107      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8be 	bl	80039dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8fd 	bl	8003a74 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d12f      	bne.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d02a      	beq.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800389c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2e      	ldr	r2, [pc, #184]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038aa:	e001      	b.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4929      	ldr	r1, [pc, #164]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038be:	e001      	b.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fdfa 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d131      	bne.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02c      	beq.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003904:	e001      	b.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4912      	ldr	r1, [pc, #72]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003912:	428b      	cmp	r3, r1
 8003914:	d101      	bne.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003918:	e001      	b.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003922:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003932:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fdc5 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800394e:	e000      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003950:	bf00      	nop
}
 8003952:	bf00      	nop
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40003800 	.word	0x40003800
 8003960:	40003400 	.word	0x40003400

08003964 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c99      	adds	r1, r3, #2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6251      	str	r1, [r2, #36]	; 0x24
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffc9 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c99      	adds	r1, r3, #2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6251      	str	r1, [r2, #36]	; 0x24
 80039ee:	8819      	ldrh	r1, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <I2SEx_TxISR_I2SExt+0x90>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <I2SEx_TxISR_I2SExt+0x22>
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <I2SEx_TxISR_I2SExt+0x94>)
 80039fc:	e001      	b.n	8003a02 <I2SEx_TxISR_I2SExt+0x26>
 80039fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a02:	460a      	mov	r2, r1
 8003a04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d121      	bne.n	8003a62 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <I2SEx_TxISR_I2SExt+0x90>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <I2SEx_TxISR_I2SExt+0x50>
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <I2SEx_TxISR_I2SExt+0x94>)
 8003a2a:	e001      	b.n	8003a30 <I2SEx_TxISR_I2SExt+0x54>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <I2SEx_TxISR_I2SExt+0x90>)
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d101      	bne.n	8003a40 <I2SEx_TxISR_I2SExt+0x64>
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <I2SEx_TxISR_I2SExt+0x94>)
 8003a3e:	e001      	b.n	8003a44 <I2SEx_TxISR_I2SExt+0x68>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff81 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40003800 	.word	0x40003800
 8003a70:	40003400 	.word	0x40003400

08003a74 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68d8      	ldr	r0, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	1c99      	adds	r1, r3, #2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a8c:	b282      	uxth	r2, r0
 8003a8e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d113      	bne.n	8003ad0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff4a 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <I2SEx_RxISR_I2SExt+0x90>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <I2SEx_RxISR_I2SExt+0x16>
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <I2SEx_RxISR_I2SExt+0x94>)
 8003aec:	e001      	b.n	8003af2 <I2SEx_RxISR_I2SExt+0x1a>
 8003aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af2:	68d8      	ldr	r0, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	1c99      	adds	r1, r3, #2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003afe:	b282      	uxth	r2, r0
 8003b00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d121      	bne.n	8003b5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <I2SEx_RxISR_I2SExt+0x90>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <I2SEx_RxISR_I2SExt+0x50>
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <I2SEx_RxISR_I2SExt+0x94>)
 8003b26:	e001      	b.n	8003b2c <I2SEx_RxISR_I2SExt+0x54>
 8003b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <I2SEx_RxISR_I2SExt+0x90>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d101      	bne.n	8003b3c <I2SEx_RxISR_I2SExt+0x64>
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <I2SEx_RxISR_I2SExt+0x94>)
 8003b3a:	e001      	b.n	8003b40 <I2SEx_RxISR_I2SExt+0x68>
 8003b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff03 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40003800 	.word	0x40003800
 8003b6c:	40003400 	.word	0x40003400

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e25b      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d075      	beq.n	8003c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8e:	4ba3      	ldr	r3, [pc, #652]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d00c      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9a:	4ba0      	ldr	r3, [pc, #640]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d112      	bne.n	8003bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b9d      	ldr	r3, [pc, #628]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	4b99      	ldr	r3, [pc, #612]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d05b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x108>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d157      	bne.n	8003c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e236      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCC_OscConfig+0x74>
 8003bd6:	4b91      	ldr	r3, [pc, #580]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a90      	ldr	r2, [pc, #576]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e01d      	b.n	8003c20 <HAL_RCC_OscConfig+0xb0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x98>
 8003bee:	4b8b      	ldr	r3, [pc, #556]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a8a      	ldr	r2, [pc, #552]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a87      	ldr	r2, [pc, #540]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0xb0>
 8003c08:	4b84      	ldr	r3, [pc, #528]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a83      	ldr	r2, [pc, #524]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b81      	ldr	r3, [pc, #516]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a80      	ldr	r2, [pc, #512]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fd f9ce 	bl	8000fc8 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fd f9ca 	bl	8000fc8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1fb      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0xc0>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fd f9ba 	bl	8000fc8 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd f9b6 	bl	8000fc8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1e7      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	4b6c      	ldr	r3, [pc, #432]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0xe8>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d063      	beq.n	8003d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c86:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x152>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1bb      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b56      	ldr	r3, [pc, #344]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4952      	ldr	r1, [pc, #328]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	e03a      	b.n	8003d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <HAL_RCC_OscConfig+0x2b0>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fd f96f 	bl	8000fc8 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fd f96b 	bl	8000fc8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e19c      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4940      	ldr	r1, [pc, #256]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_RCC_OscConfig+0x2b0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd f94e 	bl	8000fc8 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fd f94a 	bl	8000fc8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e17b      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d030      	beq.n	8003dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <HAL_RCC_OscConfig+0x2b4>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd f92e 	bl	8000fc8 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fd f92a 	bl	8000fc8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e15b      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x200>
 8003d8e:	e015      	b.n	8003dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d90:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCC_OscConfig+0x2b4>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7fd f917 	bl	8000fc8 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fd f913 	bl	8000fc8 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e144      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a0 	beq.w	8003f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_OscConfig+0x2b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d121      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <HAL_RCC_OscConfig+0x2b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <HAL_RCC_OscConfig+0x2b8>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e12:	f7fd f8d9 	bl	8000fc8 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e18:	e011      	b.n	8003e3e <HAL_RCC_OscConfig+0x2ce>
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470000 	.word	0x42470000
 8003e24:	42470e80 	.word	0x42470e80
 8003e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd f8cc 	bl	8000fc8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0fd      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3e:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d106      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2f0>
 8003e52:	4b7d      	ldr	r3, [pc, #500]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a7c      	ldr	r2, [pc, #496]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e01c      	b.n	8003e9a <HAL_RCC_OscConfig+0x32a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCC_OscConfig+0x312>
 8003e68:	4b77      	ldr	r3, [pc, #476]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a76      	ldr	r2, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	4b74      	ldr	r3, [pc, #464]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a73      	ldr	r2, [pc, #460]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	e00b      	b.n	8003e9a <HAL_RCC_OscConfig+0x32a>
 8003e82:	4b71      	ldr	r3, [pc, #452]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a70      	ldr	r2, [pc, #448]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b6e      	ldr	r3, [pc, #440]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a6d      	ldr	r2, [pc, #436]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	f023 0304 	bic.w	r3, r3, #4
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd f891 	bl	8000fc8 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fd f88d 	bl	8000fc8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0bc      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	4b61      	ldr	r3, [pc, #388]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ee      	beq.n	8003eaa <HAL_RCC_OscConfig+0x33a>
 8003ecc:	e014      	b.n	8003ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fd f87b 	bl	8000fc8 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fd f877 	bl	8000fc8 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0a6      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ee      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	4b52      	ldr	r3, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	4a51      	ldr	r2, [pc, #324]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8092 	beq.w	8004038 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f14:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d05c      	beq.n	8003fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d141      	bne.n	8003fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b48      	ldr	r3, [pc, #288]	; (800404c <HAL_RCC_OscConfig+0x4dc>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fd f84b 	bl	8000fc8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fd f847 	bl	8000fc8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e078      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f48:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	019b      	lsls	r3, r3, #6
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	4933      	ldr	r1, [pc, #204]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x4dc>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd f820 	bl	8000fc8 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fd f81c 	bl	8000fc8 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04d      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x41c>
 8003faa:	e045      	b.n	8004038 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x4dc>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f809 	bl	8000fc8 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fd f805 	bl	8000fc8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e036      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x44a>
 8003fd8:	e02e      	b.n	8004038 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e029      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_RCC_OscConfig+0x4d8>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11c      	bne.n	8004034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d115      	bne.n	8004034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004014:	4293      	cmp	r3, r2
 8004016:	d10d      	bne.n	8004034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40007000 	.word	0x40007000
 8004048:	40023800 	.word	0x40023800
 800404c:	42470060 	.word	0x42470060

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0cc      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d90c      	bls.n	800408c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b65      	ldr	r3, [pc, #404]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b63      	ldr	r3, [pc, #396]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b8      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a58      	ldr	r2, [pc, #352]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040bc:	4b53      	ldr	r3, [pc, #332]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b50      	ldr	r3, [pc, #320]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	494d      	ldr	r1, [pc, #308]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d044      	beq.n	8004170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d003      	beq.n	800410e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	2b03      	cmp	r3, #3
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b3f      	ldr	r3, [pc, #252]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e06f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3b      	ldr	r3, [pc, #236]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e067      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4934      	ldr	r1, [pc, #208]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004140:	f7fc ff42 	bl	8000fc8 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fc ff3e 	bl	8000fc8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e04f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b25      	ldr	r3, [pc, #148]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d20c      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e032      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4916      	ldr	r1, [pc, #88]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	490e      	ldr	r1, [pc, #56]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d6:	f000 f821 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041da:	4601      	mov	r1, r0
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	fa21 f303 	lsr.w	r3, r1, r3
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc fea2 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00
 800420c:	40023800 	.word	0x40023800
 8004210:	08008554 	.word	0x08008554
 8004214:	20000004 	.word	0x20000004
 8004218:	20000008 	.word	0x20000008

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	2300      	movs	r3, #0
 800422c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b04      	cmp	r3, #4
 800423c:	d007      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0x32>
 800423e:	2b08      	cmp	r3, #8
 8004240:	d008      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x38>
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 80b4 	bne.w	80043b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800424a:	60bb      	str	r3, [r7, #8]
       break;
 800424c:	e0b3      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800424e:	4b5e      	ldr	r3, [pc, #376]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004250:	60bb      	str	r3, [r7, #8]
      break;
 8004252:	e0b0      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004254:	4b5a      	ldr	r3, [pc, #360]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800425c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425e:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d04a      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426a:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	ea03 0501 	and.w	r5, r3, r1
 8004280:	ea04 0602 	and.w	r6, r4, r2
 8004284:	4629      	mov	r1, r5
 8004286:	4632      	mov	r2, r6
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	0154      	lsls	r4, r2, #5
 8004292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004296:	014b      	lsls	r3, r1, #5
 8004298:	4619      	mov	r1, r3
 800429a:	4622      	mov	r2, r4
 800429c:	1b49      	subs	r1, r1, r5
 800429e:	eb62 0206 	sbc.w	r2, r2, r6
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	0194      	lsls	r4, r2, #6
 80042ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042b0:	018b      	lsls	r3, r1, #6
 80042b2:	1a5b      	subs	r3, r3, r1
 80042b4:	eb64 0402 	sbc.w	r4, r4, r2
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	00e2      	lsls	r2, r4, #3
 80042c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042c6:	00d9      	lsls	r1, r3, #3
 80042c8:	460b      	mov	r3, r1
 80042ca:	4614      	mov	r4, r2
 80042cc:	195b      	adds	r3, r3, r5
 80042ce:	eb44 0406 	adc.w	r4, r4, r6
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	0262      	lsls	r2, r4, #9
 80042dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042e0:	0259      	lsls	r1, r3, #9
 80042e2:	460b      	mov	r3, r1
 80042e4:	4614      	mov	r4, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	4621      	mov	r1, r4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fb ff68 	bl	80001c8 <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e049      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	ea03 0501 	and.w	r5, r3, r1
 8004316:	ea04 0602 	and.w	r6, r4, r2
 800431a:	4629      	mov	r1, r5
 800431c:	4632      	mov	r2, r6
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	f04f 0400 	mov.w	r4, #0
 8004326:	0154      	lsls	r4, r2, #5
 8004328:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800432c:	014b      	lsls	r3, r1, #5
 800432e:	4619      	mov	r1, r3
 8004330:	4622      	mov	r2, r4
 8004332:	1b49      	subs	r1, r1, r5
 8004334:	eb62 0206 	sbc.w	r2, r2, r6
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f04f 0400 	mov.w	r4, #0
 8004340:	0194      	lsls	r4, r2, #6
 8004342:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004346:	018b      	lsls	r3, r1, #6
 8004348:	1a5b      	subs	r3, r3, r1
 800434a:	eb64 0402 	sbc.w	r4, r4, r2
 800434e:	f04f 0100 	mov.w	r1, #0
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800435c:	00d9      	lsls	r1, r3, #3
 800435e:	460b      	mov	r3, r1
 8004360:	4614      	mov	r4, r2
 8004362:	195b      	adds	r3, r3, r5
 8004364:	eb44 0406 	adc.w	r4, r4, r6
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	02a2      	lsls	r2, r4, #10
 8004372:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004376:	0299      	lsls	r1, r3, #10
 8004378:	460b      	mov	r3, r1
 800437a:	4614      	mov	r4, r2
 800437c:	4618      	mov	r0, r3
 800437e:	4621      	mov	r1, r4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	f7fb ff1d 	bl	80001c8 <__aeabi_uldivmod>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	3301      	adds	r3, #1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	60bb      	str	r3, [r7, #8]
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043b2:	60bb      	str	r3, [r7, #8]
      break;
 80043b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b6:	68bb      	ldr	r3, [r7, #8]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	007a1200 	.word	0x007a1200

080043cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000004 	.word	0x20000004

080043e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e8:	f7ff fff0 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 80043ec:	4601      	mov	r1, r0
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	0a9b      	lsrs	r3, r3, #10
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4a03      	ldr	r2, [pc, #12]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40023800 	.word	0x40023800
 8004408:	08008564 	.word	0x08008564

0800440c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004430:	2b00      	cmp	r3, #0
 8004432:	d035      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004434:	4b62      	ldr	r3, [pc, #392]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800443a:	f7fc fdc5 	bl	8000fc8 <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004442:	f7fc fdc1 	bl	8000fc8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0b0      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004454:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	019a      	lsls	r2, r3, #6
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	071b      	lsls	r3, r3, #28
 800446c:	4955      	ldr	r1, [pc, #340]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004474:	4b52      	ldr	r3, [pc, #328]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800447a:	f7fc fda5 	bl	8000fc8 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004482:	f7fc fda1 	bl	8000fc8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e090      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004494:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8083 	beq.w	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4b44      	ldr	r3, [pc, #272]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4a43      	ldr	r2, [pc, #268]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	; 0x40
 80044be:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ca:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3e      	ldr	r2, [pc, #248]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044d6:	f7fc fd77 	bl	8000fc8 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044de:	f7fc fd73 	bl	8000fc8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e062      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f0:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044fc:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d028      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451a:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800452a:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004530:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004536:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d114      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004542:	f7fc fd41 	bl	8000fc8 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fc fd3d 	bl	8000fc8 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e02a      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ee      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004578:	d10d      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	490d      	ldr	r1, [pc, #52]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
 8004594:	e005      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045a0:	6093      	str	r3, [r2, #8]
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	4905      	ldr	r1, [pc, #20]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	42470068 	.word	0x42470068
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40007000 	.word	0x40007000
 80045cc:	42470e40 	.word	0x42470e40

080045d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d13d      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12f      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004604:	617b      	str	r3, [r7, #20]
          break;
 8004606:	e02f      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004614:	d108      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004616:	4b18      	ldr	r3, [pc, #96]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e007      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800463a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	0f1b      	lsrs	r3, r3, #28
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	617b      	str	r3, [r7, #20]
          break;
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
          break;
 8004666:	bf00      	nop
        }
      }
      break;
 8004668:	bf00      	nop
    }
  }
  return frequency;
 800466a:	697b      	ldr	r3, [r7, #20]
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40023800 	.word	0x40023800
 800467c:	00bb8000 	.word	0x00bb8000
 8004680:	007a1200 	.word	0x007a1200
 8004684:	00f42400 	.word	0x00f42400

08004688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e056      	b.n	8004748 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fc faef 	bl	8000c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	ea42 0103 	orr.w	r1, r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 0104 	and.w	r1, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004736:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e01d      	b.n	800479e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f815 	bl	80047a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f000 fa2e 	bl	8004bf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d007      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e01d      	b.n	8004850 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fc fa7d 	bl	8000d28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 f9d5 	bl	8004bf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0202 	mvn.w	r2, #2
 8004884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f98a 	bl	8004bb4 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f97c 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f98d 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0204 	mvn.w	r2, #4
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f960 	bl	8004bb4 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f952 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f963 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b08      	cmp	r3, #8
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0208 	mvn.w	r2, #8
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f936 	bl	8004bb4 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f928 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f939 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b10      	cmp	r3, #16
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0210 	mvn.w	r2, #16
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2208      	movs	r2, #8
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f90c 	bl	8004bb4 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8fe 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f90f 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fb fdd4 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fb44 	bl	8005090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d10e      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8d4 	bl	8004bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0220 	mvn.w	r2, #32
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fb0e 	bl	800507c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e08a      	b.n	8004b98 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f000 f942 	bl	8004d30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 020c 	bic.w	r2, r2, #12
 8004aba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	619a      	str	r2, [r3, #24]
 8004ace:	e05a      	b.n	8004b86 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d11c      	bne.n	8004b10 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f000 f997 	bl	8004e18 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004af8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6999      	ldr	r1, [r3, #24]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	619a      	str	r2, [r3, #24]
 8004b0e:	e03a      	b.n	8004b86 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d11b      	bne.n	8004b4e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f000 f9b4 	bl	8004e92 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 020c 	bic.w	r2, r2, #12
 8004b38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
 8004b4c:	e01b      	b.n	8004b86 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f000 f9d4 	bl	8004f0a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	021a      	lsls	r2, r3, #8
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a40      	ldr	r2, [pc, #256]	; (8004d04 <TIM_Base_SetConfig+0x114>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d00f      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <TIM_Base_SetConfig+0x118>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3c      	ldr	r2, [pc, #240]	; (8004d0c <TIM_Base_SetConfig+0x11c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <TIM_Base_SetConfig+0x120>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3a      	ldr	r2, [pc, #232]	; (8004d14 <TIM_Base_SetConfig+0x124>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d108      	bne.n	8004c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <TIM_Base_SetConfig+0x114>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d027      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <TIM_Base_SetConfig+0x118>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d023      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <TIM_Base_SetConfig+0x11c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01f      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <TIM_Base_SetConfig+0x120>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <TIM_Base_SetConfig+0x124>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d017      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <TIM_Base_SetConfig+0x128>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <TIM_Base_SetConfig+0x12c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <TIM_Base_SetConfig+0x130>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <TIM_Base_SetConfig+0x134>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <TIM_Base_SetConfig+0x138>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <TIM_Base_SetConfig+0x13c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <TIM_Base_SetConfig+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_Base_SetConfig+0xf8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <TIM_Base_SetConfig+0x124>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d103      	bne.n	8004cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	615a      	str	r2, [r3, #20]
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800
 8004d24:	40001800 	.word	0x40001800
 8004d28:	40001c00 	.word	0x40001c00
 8004d2c:	40002000 	.word	0x40002000

08004d30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a28      	ldr	r2, [pc, #160]	; (8004dfc <TIM_TI1_SetConfig+0xcc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d017      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <TIM_TI1_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a24      	ldr	r2, [pc, #144]	; (8004e04 <TIM_TI1_SetConfig+0xd4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <TIM_TI1_SetConfig+0xd8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a22      	ldr	r2, [pc, #136]	; (8004e0c <TIM_TI1_SetConfig+0xdc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <TIM_TI1_SetConfig+0xe0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_TI1_SetConfig+0x66>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <TIM_TI1_SetConfig+0xe4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <TIM_TI1_SetConfig+0x6a>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <TIM_TI1_SetConfig+0x6c>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e003      	b.n	8004dba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 030a 	and.w	r3, r3, #10
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40001800 	.word	0x40001800

08004e18 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0210 	bic.w	r2, r3, #16
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	031b      	lsls	r3, r3, #12
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b087      	sub	sp, #28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ece:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	031b      	lsls	r3, r3, #12
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e05a      	b.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d022      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d01d      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d018      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10c      	bne.n	8005040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40010400 	.word	0x40010400
 8005074:	40014000 	.word	0x40014000
 8005078:	40001800 	.word	0x40001800

0800507c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a4:	b084      	sub	sp, #16
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	f107 001c 	add.w	r0, r7, #28
 80050b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d122      	bne.n	8005102 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d105      	bne.n	80050f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f94a 	bl	8005390 <USB_CoreReset>
 80050fc:	4603      	mov	r3, r0
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	e01a      	b.n	8005138 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f93e 	bl	8005390 <USB_CoreReset>
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
 800512a:	e005      	b.n	8005138 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b01      	cmp	r3, #1
 800513c:	d10b      	bne.n	8005156 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f043 0206 	orr.w	r2, r3, #6
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005162:	b004      	add	sp, #16
 8005164:	4770      	bx	lr

08005166 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 0201 	bic.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	e00b      	b.n	80051ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e001      	b.n	80051ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e003      	b.n	80051f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80051ee:	2032      	movs	r0, #50	; 0x32
 80051f0:	f7fb fef6 	bl	8000fe0 <HAL_Delay>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a09      	ldr	r2, [pc, #36]	; (8005248 <USB_FlushTxFifo+0x48>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e006      	b.n	800523a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b20      	cmp	r3, #32
 8005236:	d0f0      	beq.n	800521a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	00030d40 	.word	0x00030d40

0800524c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2210      	movs	r2, #16
 800525c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <USB_FlushRxFifo+0x40>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d901      	bls.n	8005270 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e006      	b.n	800527e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b10      	cmp	r3, #16
 800527a:	d0f0      	beq.n	800525e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	00030d40 	.word	0x00030d40

08005290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005290:	b480      	push	{r7}
 8005292:	b089      	sub	sp, #36	; 0x24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	4611      	mov	r1, r2
 800529c:	461a      	mov	r2, r3
 800529e:	460b      	mov	r3, r1
 80052a0:	71fb      	strb	r3, [r7, #7]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80052ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d11a      	bne.n	80052ec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052b6:	88bb      	ldrh	r3, [r7, #4]
 80052b8:	3303      	adds	r3, #3
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e00f      	b.n	80052e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	031a      	lsls	r2, r3, #12
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	461a      	mov	r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	3304      	adds	r3, #4
 80052dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3301      	adds	r3, #1
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3eb      	bcc.n	80052c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3724      	adds	r7, #36	; 0x24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b089      	sub	sp, #36	; 0x24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	4613      	mov	r3, r2
 8005306:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	3303      	adds	r3, #3
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	e00b      	b.n	8005336 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	601a      	str	r2, [r3, #0]
    pDest++;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3304      	adds	r3, #4
 800532e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	3301      	adds	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	429a      	cmp	r2, r3
 800533c:	d3ef      	bcc.n	800531e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800533e:	69fb      	ldr	r3, [r7, #28]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3724      	adds	r7, #36	; 0x24
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4013      	ands	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005364:	68fb      	ldr	r3, [r7, #12]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0301 	and.w	r3, r3, #1
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <USB_CoreReset+0x64>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e01b      	b.n	80053e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	daf2      	bge.n	800539c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f043 0201 	orr.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <USB_CoreReset+0x64>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d0f0      	beq.n	80053c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	00030d40 	.word	0x00030d40

080053f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053f8:	b084      	sub	sp, #16
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	f107 001c 	add.w	r0, r7, #28
 8005406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d018      	beq.n	800547c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10a      	bne.n	8005466 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	e014      	b.n	8005490 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005474:	f023 0304 	bic.w	r3, r3, #4
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e009      	b.n	8005490 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800548a:	f023 0304 	bic.w	r3, r3, #4
 800548e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005490:	2110      	movs	r1, #16
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff feb4 	bl	8005200 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fed7 	bl	800524c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e015      	b.n	80054d0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3301      	adds	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d3e5      	bcc.n	80054a4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80054d8:	2101      	movs	r1, #1
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8ac 	bl	8005638 <USB_DriveVbus>

  HAL_Delay(200U);
 80054e0:	20c8      	movs	r0, #200	; 0xc8
 80054e2:	f7fb fd7d 	bl	8000fe0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295
 80054f2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a14      	ldr	r2, [pc, #80]	; (800555c <USB_HostInit+0x164>)
 800550c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <USB_HostInit+0x168>)
 8005512:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005516:	e009      	b.n	800552c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a10      	ldr	r2, [pc, #64]	; (8005564 <USB_HostInit+0x16c>)
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <USB_HostInit+0x170>)
 8005528:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f043 0210 	orr.w	r2, r3, #16
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <USB_HostInit+0x174>)
 8005544:	4313      	orrs	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005556:	b004      	add	sp, #16
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	01000200 	.word	0x01000200
 8005560:	00e00300 	.word	0x00e00300
 8005564:	00600080 	.word	0x00600080
 8005568:	004000e0 	.word	0x004000e0
 800556c:	a3200008 	.word	0xa3200008

08005570 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d107      	bne.n	80055c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b8:	461a      	mov	r2, r3
 80055ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055be:	6053      	str	r3, [r2, #4]
 80055c0:	e009      	b.n	80055d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d106      	bne.n	80055d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ce:	461a      	mov	r2, r3
 80055d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80055d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005604:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005614:	2064      	movs	r0, #100	; 0x64
 8005616:	f7fb fce3 	bl	8000fe0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005626:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005628:	200a      	movs	r0, #10
 800562a:	f7fb fcd9 	bl	8000fe0 <HAL_Delay>

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800565c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <USB_DriveVbus+0x44>
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800567a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005686:	d109      	bne.n	800569c <USB_DriveVbus+0x64>
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	0c5b      	lsrs	r3, r3, #17
 80056c8:	f003 0303 	and.w	r3, r3, #3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	b29b      	uxth	r3, r3
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	4603      	mov	r3, r0
 800570c:	70fb      	strb	r3, [r7, #3]
 800570e:	460b      	mov	r3, r1
 8005710:	70bb      	strb	r3, [r7, #2]
 8005712:	4613      	mov	r3, r2
 8005714:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	461a      	mov	r2, r3
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005732:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005736:	2b03      	cmp	r3, #3
 8005738:	d87e      	bhi.n	8005838 <USB_HC_Init+0x13c>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <USB_HC_Init+0x44>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005751 	.word	0x08005751
 8005744:	080057fb 	.word	0x080057fb
 8005748:	08005751 	.word	0x08005751
 800574c:	080057bd 	.word	0x080057bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005762:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005764:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da10      	bge.n	800578e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	440a      	add	r2, r1
 8005782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800578c:	e057      	b.n	800583e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d051      	beq.n	800583e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057b8:	60d3      	str	r3, [r2, #12]
      break;
 80057ba:	e040      	b.n	800583e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	461a      	mov	r2, r3
 80057ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80057ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da34      	bge.n	8005842 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057f8:	e023      	b.n	8005842 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	461a      	mov	r2, r3
 8005808:	f240 2325 	movw	r3, #549	; 0x225
 800580c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800580e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da17      	bge.n	8005846 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	440a      	add	r2, r1
 800582c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005830:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005834:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005836:	e006      	b.n	8005846 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
      break;
 800583c:	e004      	b.n	8005848 <USB_HC_Init+0x14c>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <USB_HC_Init+0x14c>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <USB_HC_Init+0x14c>
      break;
 8005846:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	2101      	movs	r1, #1
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005862:	4313      	orrs	r3, r2
 8005864:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005876:	2b00      	cmp	r3, #0
 8005878:	da03      	bge.n	8005882 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800587a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	e001      	b.n	8005886 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d103      	bne.n	8005896 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800588e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e001      	b.n	800589a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800589a:	787b      	ldrb	r3, [r7, #1]
 800589c:	059b      	lsls	r3, r3, #22
 800589e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058a2:	78bb      	ldrb	r3, [r7, #2]
 80058a4:	02db      	lsls	r3, r3, #11
 80058a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058b0:	049b      	lsls	r3, r3, #18
 80058b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80058ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	0159      	lsls	r1, r3, #5
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	440b      	add	r3, r1
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80058d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d10f      	bne.n	8005900 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058fe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
}
 8005902:	4618      	mov	r0, r3
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop

08005910 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	; 0x30
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800592c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d028      	beq.n	800598c <USB_HC_StartXfer+0x7c>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d124      	bne.n	800598c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <USB_HC_StartXfer+0x50>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	795b      	ldrb	r3, [r3, #5]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fa30 	bl	8005dbc <USB_DoPing>
      return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e114      	b.n	8005b8a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d112      	bne.n	800598c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	440a      	add	r2, r1
 800597c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005980:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005984:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2200      	movs	r2, #0
 800598a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d018      	beq.n	80059c6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	8912      	ldrh	r2, [r2, #8]
 800599c:	4413      	add	r3, r2
 800599e:	3b01      	subs	r3, #1
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	8912      	ldrh	r2, [r2, #8]
 80059a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059ac:	8b7b      	ldrh	r3, [r7, #26]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d90b      	bls.n	80059ca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80059b2:	8b7b      	ldrh	r3, [r7, #26]
 80059b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80059b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	8912      	ldrh	r2, [r2, #8]
 80059bc:	fb02 f203 	mul.w	r2, r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	611a      	str	r2, [r3, #16]
 80059c4:	e001      	b.n	80059ca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80059c6:	2301      	movs	r3, #1
 80059c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80059d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	8912      	ldrh	r2, [r2, #8]
 80059d8:	fb02 f203 	mul.w	r2, r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059ea:	04d9      	lsls	r1, r3, #19
 80059ec:	4b69      	ldr	r3, [pc, #420]	; (8005b94 <USB_HC_StartXfer+0x284>)
 80059ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80059f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	7a9b      	ldrb	r3, [r3, #10]
 80059f6:	075b      	lsls	r3, r3, #29
 80059f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	0148      	lsls	r0, r1, #5
 8005a00:	6a39      	ldr	r1, [r7, #32]
 8005a02:	4401      	add	r1, r0
 8005a04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	68d9      	ldr	r1, [r3, #12]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	460a      	mov	r2, r1
 8005a24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	7e7b      	ldrb	r3, [r7, #25]
 8005a6e:	075b      	lsls	r3, r3, #29
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	0148      	lsls	r0, r1, #5
 8005a74:	6a39      	ldr	r1, [r7, #32]
 8005a76:	4401      	add	r1, r0
 8005a78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a42      	ldr	r2, [pc, #264]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005a90:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a9a:	4a3f      	ldr	r2, [pc, #252]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005a9c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	78db      	ldrb	r3, [r3, #3]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005aa6:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aae:	4a3a      	ldr	r2, [pc, #232]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e005      	b.n	8005ac0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ab4:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005abc:	4a36      	ldr	r2, [pc, #216]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005abe:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ac0:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ac8:	4a33      	ldr	r2, [pc, #204]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005aca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <USB_HC_StartXfer+0x288>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e04f      	b.n	8005b8a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	78db      	ldrb	r3, [r3, #3]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d14a      	bne.n	8005b88 <USB_HC_StartXfer+0x278>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d046      	beq.n	8005b88 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	79db      	ldrb	r3, [r3, #7]
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d830      	bhi.n	8005b64 <USB_HC_StartXfer+0x254>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <USB_HC_StartXfer+0x1f8>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005b19 	.word	0x08005b19
 8005b14:	08005b3d 	.word	0x08005b3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	3303      	adds	r3, #3
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b22:	8afa      	ldrh	r2, [r7, #22]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d91c      	bls.n	8005b68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b3a:	e015      	b.n	8005b68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	3303      	adds	r3, #3
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b46:	8afa      	ldrh	r2, [r7, #22]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d90a      	bls.n	8005b6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b62:	e003      	b.n	8005b6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <USB_HC_StartXfer+0x25e>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <USB_HC_StartXfer+0x25e>
        break;
 8005b6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	785a      	ldrb	r2, [r3, #1]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	b298      	uxth	r0, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4603      	mov	r3, r0
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fb84 	bl	8005290 <USB_WritePacket>
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3728      	adds	r7, #40	; 0x28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	1ff80000 	.word	0x1ff80000
 8005b98:	200000b8 	.word	0x200000b8

08005b9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	b29b      	uxth	r3, r3
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	0c9b      	lsrs	r3, r3, #18
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <USB_HC_Halt+0x3a>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d16c      	bne.n	8005cd2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c16:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d143      	bne.n	8005cac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c82:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3301      	adds	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c90:	d81d      	bhi.n	8005cce <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca8:	d0ec      	beq.n	8005c84 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005caa:	e080      	b.n	8005dae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ccc:	e06f      	b.n	8005dae <USB_HC_Halt+0x1f0>
          break;
 8005cce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cd0:	e06d      	b.n	8005dae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d143      	bne.n	8005d8a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d60:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3301      	adds	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d6e:	d81d      	bhi.n	8005dac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d86:	d0ec      	beq.n	8005d62 <USB_HC_Halt+0x1a4>
 8005d88:	e011      	b.n	8005dae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	e000      	b.n	8005dae <USB_HC_Halt+0x1f0>
          break;
 8005dac:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	04da      	lsls	r2, r3, #19
 8005dd8:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <USB_DoPing+0x74>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	1ff80000 	.word	0x1ff80000

08005e34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff f99f 	bl	8005188 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e4a:	2110      	movs	r1, #16
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff f9d7 	bl	8005200 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff f9fa 	bl	800524c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	e01f      	b.n	8005e9e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e92:	461a      	mov	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b0f      	cmp	r3, #15
 8005ea2:	d9dc      	bls.n	8005e5e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e034      	b.n	8005f14 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ed0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ef0:	d80c      	bhi.n	8005f0c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f08:	d0ec      	beq.n	8005ee4 <USB_StopHost+0xb0>
 8005f0a:	e000      	b.n	8005f0e <USB_StopHost+0xda>
        break;
 8005f0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3301      	adds	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d9c7      	bls.n	8005eaa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f20:	461a      	mov	r2, r3
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff f918 	bl	8005166 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b089      	sub	sp, #36	; 0x24
 8005f44:	af04      	add	r7, sp, #16
 8005f46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f48:	2301      	movs	r3, #1
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fc68 	bl	8006824 <USBH_FindInterface>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2bff      	cmp	r3, #255	; 0xff
 8005f5c:	d002      	beq.n	8005f64 <USBH_CDC_InterfaceInit+0x24>
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d901      	bls.n	8005f68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f64:	2302      	movs	r3, #2
 8005f66:	e13d      	b.n	80061e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fc3d 	bl	80067ec <USBH_SelectInterface>
 8005f72:	4603      	mov	r3, r0
 8005f74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e131      	b.n	80061e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f86:	2050      	movs	r0, #80	; 0x50
 8005f88:	f002 fa04 	bl	8008394 <malloc>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e11f      	b.n	80061e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005fa4:	2250      	movs	r2, #80	; 0x50
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	68b8      	ldr	r0, [r7, #8]
 8005faa:	f002 fa03 	bl	80083b4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	211a      	movs	r1, #26
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da15      	bge.n	8005ff2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	211a      	movs	r1, #26
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	211a      	movs	r1, #26
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fec:	881a      	ldrh	r2, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fe36 	bl	8007c6a <USBH_AllocPipe>
 8005ffe:	4603      	mov	r3, r0
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	7819      	ldrb	r1, [r3, #0]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	7858      	ldrb	r0, [r3, #1]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	8952      	ldrh	r2, [r2, #10]
 800601e:	9202      	str	r2, [sp, #8]
 8006020:	2203      	movs	r2, #3
 8006022:	9201      	str	r2, [sp, #4]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4623      	mov	r3, r4
 8006028:	4602      	mov	r2, r0
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 fdee 	bl	8007c0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 f8fb 	bl	8008234 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800603e:	2300      	movs	r3, #0
 8006040:	2200      	movs	r2, #0
 8006042:	210a      	movs	r1, #10
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fbed 	bl	8006824 <USBH_FindInterface>
 800604a:	4603      	mov	r3, r0
 800604c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	2bff      	cmp	r3, #255	; 0xff
 8006052:	d002      	beq.n	800605a <USBH_CDC_InterfaceInit+0x11a>
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d901      	bls.n	800605e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800605a:	2302      	movs	r3, #2
 800605c:	e0c2      	b.n	80061e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	211a      	movs	r1, #26
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b25b      	sxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	da16      	bge.n	80060a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	211a      	movs	r1, #26
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	211a      	movs	r1, #26
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	4413      	add	r3, r2
 8006098:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800609c:	881a      	ldrh	r2, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	835a      	strh	r2, [r3, #26]
 80060a2:	e015      	b.n	80060d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	211a      	movs	r1, #26
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	211a      	movs	r1, #26
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	211a      	movs	r1, #26
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da16      	bge.n	8006116 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	211a      	movs	r1, #26
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	211a      	movs	r1, #26
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	835a      	strh	r2, [r3, #26]
 8006114:	e015      	b.n	8006142 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	211a      	movs	r1, #26
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	211a      	movs	r1, #26
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800613c:	881a      	ldrh	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	7b9b      	ldrb	r3, [r3, #14]
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fd8e 	bl	8007c6a <USBH_AllocPipe>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	7bdb      	ldrb	r3, [r3, #15]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fd84 	bl	8007c6a <USBH_AllocPipe>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	7b59      	ldrb	r1, [r3, #13]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	7b98      	ldrb	r0, [r3, #14]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	8b12      	ldrh	r2, [r2, #24]
 8006182:	9202      	str	r2, [sp, #8]
 8006184:	2202      	movs	r2, #2
 8006186:	9201      	str	r2, [sp, #4]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4623      	mov	r3, r4
 800618c:	4602      	mov	r2, r0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fd3c 	bl	8007c0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	7b19      	ldrb	r1, [r3, #12]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	7bd8      	ldrb	r0, [r3, #15]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	8b52      	ldrh	r2, [r2, #26]
 80061ac:	9202      	str	r2, [sp, #8]
 80061ae:	2202      	movs	r2, #2
 80061b0:	9201      	str	r2, [sp, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	4623      	mov	r3, r4
 80061b6:	4602      	mov	r2, r0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fd27 	bl	8007c0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	7b5b      	ldrb	r3, [r3, #13]
 80061ca:	2200      	movs	r2, #0
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f002 f830 	bl	8008234 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	7b1b      	ldrb	r3, [r3, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f002 f829 	bl	8008234 <USBH_LL_SetToggle>

  return USBH_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00e      	beq.n	8006224 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 fd1c 	bl	8007c4a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fd47 	bl	8007cac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	7b1b      	ldrb	r3, [r3, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	7b1b      	ldrb	r3, [r3, #12]
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fd09 	bl	8007c4a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	7b1b      	ldrb	r3, [r3, #12]
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fd34 	bl	8007cac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	7b5b      	ldrb	r3, [r3, #13]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00e      	beq.n	8006270 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	7b5b      	ldrb	r3, [r3, #13]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 fcf6 	bl	8007c4a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	7b5b      	ldrb	r3, [r3, #13]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fd21 	bl	8007cac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	4618      	mov	r0, r3
 8006286:	f002 f88d 	bl	80083a4 <free>
    phost->pActiveClass->pData = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006290:	2200      	movs	r2, #0
 8006292:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3340      	adds	r3, #64	; 0x40
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8b1 	bl	800641e <GetLineCoding>
 80062bc:	4603      	mov	r3, r0
 80062be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062cc:	2102      	movs	r1, #2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062d2:	7afb      	ldrb	r3, [r7, #11]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d877      	bhi.n	80063f0 <USBH_CDC_Process+0x114>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <USBH_CDC_Process+0x2c>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	0800631d 	.word	0x0800631d
 800630c:	08006323 	.word	0x08006323
 8006310:	08006353 	.word	0x08006353
 8006314:	080063c7 	.word	0x080063c7
 8006318:	080063d5 	.word	0x080063d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	73fb      	strb	r3, [r7, #15]
      break;
 8006320:	e06d      	b.n	80063fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f897 	bl	800645c <SetLineCoding>
 800632e:	4603      	mov	r3, r0
 8006330:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006340:	e058      	b.n	80063f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d055      	beq.n	80063f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2204      	movs	r2, #4
 800634c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006350:	e050      	b.n	80063f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	3340      	adds	r3, #64	; 0x40
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f860 	bl	800641e <GetLineCoding>
 800635e:	4603      	mov	r3, r0
 8006360:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d126      	bne.n	80063b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637a:	791b      	ldrb	r3, [r3, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d13b      	bne.n	80063f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800638a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800638c:	429a      	cmp	r2, r3
 800638e:	d133      	bne.n	80063f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800639c:	429a      	cmp	r2, r3
 800639e:	d12b      	bne.n	80063f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d124      	bne.n	80063f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f95a 	bl	8006668 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063b4:	e020      	b.n	80063f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d01d      	beq.n	80063f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2204      	movs	r2, #4
 80063c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063c4:	e018      	b.n	80063f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f867 	bl	800649a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f8dc 	bl	800658a <CDC_ProcessReception>
      break;
 80063d2:	e014      	b.n	80063fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063d4:	2100      	movs	r1, #0
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 ffe5 	bl	80073a6 <USBH_ClrFeature>
 80063dc:	4603      	mov	r3, r0
 80063de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80063ee:	e005      	b.n	80063fc <USBH_CDC_Process+0x120>

    default:
      break;
 80063f0:	bf00      	nop
 80063f2:	e004      	b.n	80063fe <USBH_CDC_Process+0x122>
      break;
 80063f4:	bf00      	nop
 80063f6:	e002      	b.n	80063fe <USBH_CDC_Process+0x122>
      break;
 80063f8:	bf00      	nop
 80063fa:	e000      	b.n	80063fe <USBH_CDC_Process+0x122>
      break;
 80063fc:	bf00      	nop

  }

  return status;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	22a1      	movs	r2, #161	; 0xa1
 800642c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2221      	movs	r2, #33	; 0x21
 8006432:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2207      	movs	r2, #7
 8006444:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2207      	movs	r2, #7
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 f98a 	bl	8007766 <USBH_CtlReq>
 8006452:	4603      	mov	r3, r0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2207      	movs	r2, #7
 8006482:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2207      	movs	r2, #7
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 f96b 	bl	8007766 <USBH_CtlReq>
 8006490:	4603      	mov	r3, r0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af02      	add	r7, sp, #8
 80064a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d002      	beq.n	80064c0 <CDC_ProcessTransmission+0x26>
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d025      	beq.n	800650a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80064be:	e060      	b.n	8006582 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	8b12      	ldrh	r2, [r2, #24]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d90c      	bls.n	80064e6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	69d9      	ldr	r1, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8b1a      	ldrh	r2, [r3, #24]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	7b58      	ldrb	r0, [r3, #13]
 80064d8:	2301      	movs	r3, #1
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	4603      	mov	r3, r0
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fb51 	bl	8007b86 <USBH_BulkSendData>
 80064e4:	e00c      	b.n	8006500 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	7b58      	ldrb	r0, [r3, #13]
 80064f4:	2301      	movs	r3, #1
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4603      	mov	r3, r0
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fb43 	bl	8007b86 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006508:	e03b      	b.n	8006582 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	7b5b      	ldrb	r3, [r3, #13]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 fe65 	bl	80081e0 <USBH_LL_GetURBState>
 8006516:	4603      	mov	r3, r0
 8006518:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d128      	bne.n	8006572 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	8b12      	ldrh	r2, [r2, #24]
 8006528:	4293      	cmp	r3, r2
 800652a:	d90e      	bls.n	800654a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	8b12      	ldrh	r2, [r2, #24]
 8006534:	1a9a      	subs	r2, r3, r2
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	8b12      	ldrh	r2, [r2, #24]
 8006542:	441a      	add	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	61da      	str	r2, [r3, #28]
 8006548:	e002      	b.n	8006550 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006560:	e00e      	b.n	8006580 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f868 	bl	8006640 <USBH_CDC_TransmitCallback>
      break;
 8006570:	e006      	b.n	8006580 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d103      	bne.n	8006580 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006580:	bf00      	nop
  }
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800659c:	2300      	movs	r3, #0
 800659e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d002      	beq.n	80065b0 <CDC_ProcessReception+0x26>
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d00e      	beq.n	80065cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80065ae:	e043      	b.n	8006638 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6a19      	ldr	r1, [r3, #32]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	8b5a      	ldrh	r2, [r3, #26]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	7b1b      	ldrb	r3, [r3, #12]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fb07 	bl	8007bd0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2204      	movs	r2, #4
 80065c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065ca:	e035      	b.n	8006638 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	7b1b      	ldrb	r3, [r3, #12]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fe04 	bl	80081e0 <USBH_LL_GetURBState>
 80065d8:	4603      	mov	r3, r0
 80065da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80065dc:	7cfb      	ldrb	r3, [r7, #19]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d129      	bne.n	8006636 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	7b1b      	ldrb	r3, [r3, #12]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fd67 	bl	80080bc <USBH_LL_GetLastXferSize>
 80065ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d016      	beq.n	8006628 <CDC_ProcessReception+0x9e>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	8b5b      	ldrh	r3, [r3, #26]
 80065fe:	461a      	mov	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4293      	cmp	r3, r2
 8006604:	d910      	bls.n	8006628 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad2      	subs	r2, r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	441a      	add	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2203      	movs	r2, #3
 8006622:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006626:	e006      	b.n	8006636 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f80f 	bl	8006654 <USBH_CDC_ReceiveCallback>
      break;
 8006636:	bf00      	nop
  }
}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006690:	2302      	movs	r3, #2
 8006692:	e029      	b.n	80066e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	79fa      	ldrb	r2, [r7, #7]
 8006698:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f81f 	bl	80066f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f001 fc39 	bl	8007f58 <USBH_LL_Init>

  return USBH_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e009      	b.n	8006716 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	33e0      	adds	r3, #224	; 0xe0
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	2200      	movs	r2, #0
 800670e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b0e      	cmp	r3, #14
 800671a:	d9f2      	bls.n	8006702 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e009      	b.n	8006736 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800673c:	d3f1      	bcc.n	8006722 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2240      	movs	r2, #64	; 0x40
 8006762:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d016      	beq.n	80067da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10e      	bne.n	80067d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	33de      	adds	r3, #222	; 0xde
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e004      	b.n	80067de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067d4:	2302      	movs	r3, #2
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e001      	b.n	80067de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067da:	2302      	movs	r3, #2
 80067dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	429a      	cmp	r2, r3
 8006806:	d204      	bcs.n	8006812 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006810:	e001      	b.n	8006816 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006812:	2302      	movs	r3, #2
 8006814:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	4608      	mov	r0, r1
 800682e:	4611      	mov	r1, r2
 8006830:	461a      	mov	r2, r3
 8006832:	4603      	mov	r3, r0
 8006834:	70fb      	strb	r3, [r7, #3]
 8006836:	460b      	mov	r3, r1
 8006838:	70bb      	strb	r3, [r7, #2]
 800683a:	4613      	mov	r3, r2
 800683c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800684c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800684e:	e025      	b.n	800689c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	221a      	movs	r2, #26
 8006854:	fb02 f303 	mul.w	r3, r2, r3
 8006858:	3308      	adds	r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	3302      	adds	r3, #2
 8006860:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	795b      	ldrb	r3, [r3, #5]
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	429a      	cmp	r2, r3
 800686a:	d002      	beq.n	8006872 <USBH_FindInterface+0x4e>
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	2bff      	cmp	r3, #255	; 0xff
 8006870:	d111      	bne.n	8006896 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006876:	78ba      	ldrb	r2, [r7, #2]
 8006878:	429a      	cmp	r2, r3
 800687a:	d002      	beq.n	8006882 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800687c:	78bb      	ldrb	r3, [r7, #2]
 800687e:	2bff      	cmp	r3, #255	; 0xff
 8006880:	d109      	bne.n	8006896 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006886:	787a      	ldrb	r2, [r7, #1]
 8006888:	429a      	cmp	r2, r3
 800688a:	d002      	beq.n	8006892 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800688c:	787b      	ldrb	r3, [r7, #1]
 800688e:	2bff      	cmp	r3, #255	; 0xff
 8006890:	d101      	bne.n	8006896 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	e006      	b.n	80068a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	3301      	adds	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d9d6      	bls.n	8006850 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068a2:	23ff      	movs	r3, #255	; 0xff
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fb89 	bl	8007fd0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80068be:	2101      	movs	r1, #1
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fca0 	bl	8008206 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068d8:	2302      	movs	r3, #2
 80068da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d102      	bne.n	80068f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2203      	movs	r2, #3
 80068f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b0b      	cmp	r3, #11
 80068fa:	f200 81b3 	bhi.w	8006c64 <USBH_Process+0x394>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <USBH_Process+0x34>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006935 	.word	0x08006935
 8006908:	08006967 	.word	0x08006967
 800690c:	080069cf 	.word	0x080069cf
 8006910:	08006bff 	.word	0x08006bff
 8006914:	08006c65 	.word	0x08006c65
 8006918:	08006a73 	.word	0x08006a73
 800691c:	08006ba5 	.word	0x08006ba5
 8006920:	08006aa9 	.word	0x08006aa9
 8006924:	08006ac9 	.word	0x08006ac9
 8006928:	08006ae9 	.word	0x08006ae9
 800692c:	08006b17 	.word	0x08006b17
 8006930:	08006be7 	.word	0x08006be7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8193 	beq.w	8006c68 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006948:	20c8      	movs	r0, #200	; 0xc8
 800694a:	f001 fca6 	bl	800829a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fb99 	bl	8008086 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006964:	e180      	b.n	8006c68 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800697e:	e182      	b.n	8006c86 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800698a:	d914      	bls.n	80069b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006992:	3301      	adds	r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d903      	bls.n	80069ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	220d      	movs	r2, #13
 80069aa:	701a      	strb	r2, [r3, #0]
      break;
 80069ac:	e16b      	b.n	8006c86 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
      break;
 80069b4:	e167      	b.n	8006c86 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069bc:	f103 020a 	add.w	r2, r3, #10
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80069c6:	200a      	movs	r0, #10
 80069c8:	f001 fc67 	bl	800829a <USBH_Delay>
      break;
 80069cc:	e15b      	b.n	8006c86 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069de:	2104      	movs	r1, #4
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069e4:	2064      	movs	r0, #100	; 0x64
 80069e6:	f001 fc58 	bl	800829a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fb26 	bl	800803c <USBH_LL_GetSpeed>
 80069f0:	4603      	mov	r3, r0
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2205      	movs	r2, #5
 80069fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 f931 	bl	8007c6a <USBH_AllocPipe>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f929 	bl	8007c6a <USBH_AllocPipe>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7919      	ldrb	r1, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a34:	b292      	uxth	r2, r2
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2280      	movs	r2, #128	; 0x80
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 f8e2 	bl	8007c0c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7959      	ldrb	r1, [r3, #5]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a5c:	b292      	uxth	r2, r2
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4603      	mov	r3, r0
 8006a68:	2200      	movs	r2, #0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 f8ce 	bl	8007c0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a70:	e109      	b.n	8006c86 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f90c 	bl	8006c90 <USBH_HandleEnum>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 80f3 	bne.w	8006c6c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d103      	bne.n	8006aa0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a9e:	e0e5      	b.n	8006c6c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2207      	movs	r2, #7
 8006aa4:	701a      	strb	r2, [r3, #0]
      break;
 8006aa6:	e0e1      	b.n	8006c6c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80de 	beq.w	8006c70 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aba:	2101      	movs	r1, #1
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ac6:	e0d3      	b.n	8006c70 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fc20 	bl	8007318 <USBH_SetCfg>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 80ca 	bne.w	8006c74 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2209      	movs	r2, #9
 8006ae4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ae6:	e0c5      	b.n	8006c74 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006af6:	2101      	movs	r1, #1
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fc30 	bl	800735e <USBH_SetFeature>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 80b9 	bne.w	8006c78 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	220a      	movs	r2, #10
 8006b0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b0c:	e0b4      	b.n	8006c78 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	220a      	movs	r2, #10
 8006b12:	701a      	strb	r2, [r3, #0]
      break;
 8006b14:	e0b0      	b.n	8006c78 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80ad 	beq.w	8006c7c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
 8006b2e:	e016      	b.n	8006b5e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b30:	7bfa      	ldrb	r2, [r7, #15]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32de      	adds	r2, #222	; 0xde
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	791a      	ldrb	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d108      	bne.n	8006b58 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b46:	7bfa      	ldrb	r2, [r7, #15]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	32de      	adds	r2, #222	; 0xde
 8006b4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b56:	e005      	b.n	8006b64 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	73fb      	strb	r3, [r7, #15]
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0e5      	beq.n	8006b30 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d016      	beq.n	8006b9c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2206      	movs	r2, #6
 8006b84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b8c:	2103      	movs	r1, #3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b92:	e073      	b.n	8006c7c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	220d      	movs	r2, #13
 8006b98:	701a      	strb	r2, [r3, #0]
      break;
 8006b9a:	e06f      	b.n	8006c7c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	220d      	movs	r2, #13
 8006ba0:	701a      	strb	r2, [r3, #0]
      break;
 8006ba2:	e06b      	b.n	8006c7c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d017      	beq.n	8006bde <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	220b      	movs	r2, #11
 8006bca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bcc:	e058      	b.n	8006c80 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d154      	bne.n	8006c80 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	220d      	movs	r2, #13
 8006bda:	701a      	strb	r2, [r3, #0]
      break;
 8006bdc:	e050      	b.n	8006c80 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	220d      	movs	r2, #13
 8006be2:	701a      	strb	r2, [r3, #0]
      break;
 8006be4:	e04c      	b.n	8006c80 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d049      	beq.n	8006c84 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
      }
      break;
 8006bfc:	e042      	b.n	8006c84 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fd72 	bl	80066f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c3a:	2105      	movs	r1, #5
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d107      	bne.n	8006c5c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff fe2b 	bl	80068b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c5a:	e014      	b.n	8006c86 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f9b7 	bl	8007fd0 <USBH_LL_Start>
      break;
 8006c62:	e010      	b.n	8006c86 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c64:	bf00      	nop
 8006c66:	e00e      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e00c      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c6c:	bf00      	nop
 8006c6e:	e00a      	b.n	8006c86 <USBH_Process+0x3b6>
    break;
 8006c70:	bf00      	nop
 8006c72:	e008      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c74:	bf00      	nop
 8006c76:	e006      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c78:	bf00      	nop
 8006c7a:	e004      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e002      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <USBH_Process+0x3b6>
      break;
 8006c84:	bf00      	nop
  }
  return USBH_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af04      	add	r7, sp, #16
 8006c96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b07      	cmp	r3, #7
 8006ca6:	f200 81c1 	bhi.w	800702c <USBH_HandleEnum+0x39c>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <USBH_HandleEnum+0x20>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cd1 	.word	0x08006cd1
 8006cb4:	08006d8f 	.word	0x08006d8f
 8006cb8:	08006df9 	.word	0x08006df9
 8006cbc:	08006e87 	.word	0x08006e87
 8006cc0:	08006ef1 	.word	0x08006ef1
 8006cc4:	08006f61 	.word	0x08006f61
 8006cc8:	08006fa7 	.word	0x08006fa7
 8006ccc:	08006fed 	.word	0x08006fed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006cd0:	2108      	movs	r1, #8
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa50 	bl	8007178 <USBH_Get_DevDesc>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d130      	bne.n	8006d44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7919      	ldrb	r1, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d06:	b292      	uxth	r2, r2
 8006d08:	9202      	str	r2, [sp, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	9201      	str	r2, [sp, #4]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4603      	mov	r3, r0
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 ff79 	bl	8007c0c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7959      	ldrb	r1, [r3, #5]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 ff65 	bl	8007c0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d42:	e175      	b.n	8007030 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	f040 8172 	bne.w	8007030 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d52:	3301      	adds	r3, #1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d903      	bls.n	8006d6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	220d      	movs	r2, #13
 8006d6a:	701a      	strb	r2, [r3, #0]
      break;
 8006d6c:	e160      	b.n	8007030 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	795b      	ldrb	r3, [r3, #5]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 ff99 	bl	8007cac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 ff93 	bl	8007cac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
      break;
 8006d8c:	e150      	b.n	8007030 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d8e:	2112      	movs	r1, #18
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f9f1 	bl	8007178 <USBH_Get_DevDesc>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d103      	bne.n	8006da8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006da6:	e145      	b.n	8007034 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	f040 8142 	bne.w	8007034 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006db6:	3301      	adds	r3, #1
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d903      	bls.n	8006dd2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220d      	movs	r2, #13
 8006dce:	701a      	strb	r2, [r3, #0]
      break;
 8006dd0:	e130      	b.n	8007034 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	795b      	ldrb	r3, [r3, #5]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ff67 	bl	8007cac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 ff61 	bl	8007cac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
      break;
 8006df6:	e11d      	b.n	8007034 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006df8:	2101      	movs	r1, #1
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa68 	bl	80072d0 <USBH_SetAddress>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d132      	bne.n	8006e70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e0a:	2002      	movs	r0, #2
 8006e0c:	f001 fa45 	bl	800829a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7919      	ldrb	r1, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e32:	b292      	uxth	r2, r2
 8006e34:	9202      	str	r2, [sp, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	9201      	str	r2, [sp, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2280      	movs	r2, #128	; 0x80
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fee3 	bl	8007c0c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7959      	ldrb	r1, [r3, #5]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	9202      	str	r2, [sp, #8]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	9201      	str	r2, [sp, #4]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4603      	mov	r3, r0
 8006e66:	2200      	movs	r2, #0
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fecf 	bl	8007c0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e6e:	e0e3      	b.n	8007038 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	f040 80e0 	bne.w	8007038 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	220d      	movs	r2, #13
 8006e7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	705a      	strb	r2, [r3, #1]
      break;
 8006e84:	e0d8      	b.n	8007038 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e86:	2109      	movs	r1, #9
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f99d 	bl	80071c8 <USBH_Get_CfgDesc>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e9e:	e0cd      	b.n	800703c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	f040 80ca 	bne.w	800703c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eae:	3301      	adds	r3, #1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d903      	bls.n	8006eca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	220d      	movs	r2, #13
 8006ec6:	701a      	strb	r2, [r3, #0]
      break;
 8006ec8:	e0b8      	b.n	800703c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	795b      	ldrb	r3, [r3, #5]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 feeb 	bl	8007cac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	791b      	ldrb	r3, [r3, #4]
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fee5 	bl	8007cac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
      break;
 8006eee:	e0a5      	b.n	800703c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f965 	bl	80071c8 <USBH_Get_CfgDesc>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f0e:	e097      	b.n	8007040 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	f040 8094 	bne.w	8007040 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d903      	bls.n	8006f3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	220d      	movs	r2, #13
 8006f36:	701a      	strb	r2, [r3, #0]
      break;
 8006f38:	e082      	b.n	8007040 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	795b      	ldrb	r3, [r3, #5]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 feb3 	bl	8007cac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	791b      	ldrb	r3, [r3, #4]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fead 	bl	8007cac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
      break;
 8006f5e:	e06f      	b.n	8007040 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d019      	beq.n	8006f9e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f76:	23ff      	movs	r3, #255	; 0xff
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f949 	bl	8007210 <USBH_Get_StringDesc>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f8e:	e059      	b.n	8007044 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d156      	bne.n	8007044 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2206      	movs	r2, #6
 8006f9a:	705a      	strb	r2, [r3, #1]
      break;
 8006f9c:	e052      	b.n	8007044 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2206      	movs	r2, #6
 8006fa2:	705a      	strb	r2, [r3, #1]
      break;
 8006fa4:	e04e      	b.n	8007044 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d019      	beq.n	8006fe4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fbc:	23ff      	movs	r3, #255	; 0xff
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f926 	bl	8007210 <USBH_Get_StringDesc>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fd4:	e038      	b.n	8007048 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d135      	bne.n	8007048 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2207      	movs	r2, #7
 8006fe0:	705a      	strb	r2, [r3, #1]
      break;
 8006fe2:	e031      	b.n	8007048 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	705a      	strb	r2, [r3, #1]
      break;
 8006fea:	e02d      	b.n	8007048 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d017      	beq.n	8007026 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007002:	23ff      	movs	r3, #255	; 0xff
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f903 	bl	8007210 <USBH_Get_StringDesc>
 800700a:	4603      	mov	r3, r0
 800700c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007018:	e018      	b.n	800704c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d115      	bne.n	800704c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e012      	b.n	800704c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
      break;
 800702a:	e00f      	b.n	800704c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800702c:	bf00      	nop
 800702e:	e00e      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 8007030:	bf00      	nop
 8007032:	e00c      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 8007034:	bf00      	nop
 8007036:	e00a      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 8007038:	bf00      	nop
 800703a:	e008      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 800703c:	bf00      	nop
 800703e:	e006      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 8007040:	bf00      	nop
 8007042:	e004      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <USBH_HandleEnum+0x3be>
      break;
 800704c:	bf00      	nop
  }
  return Status;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f804 	bl	800709a <USBH_HandleSof>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b0b      	cmp	r3, #11
 80070aa:	d10a      	bne.n	80070c2 <USBH_HandleSof+0x28>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
  }
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80070da:	bf00      	nop
}
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070f6:	bf00      	nop
}
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 ff58 	bl	8008006 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	791b      	ldrb	r3, [r3, #4]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fda5 	bl	8007cac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	795b      	ldrb	r3, [r3, #5]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fd9f 	bl	8007cac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af02      	add	r7, sp, #8
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	b29b      	uxth	r3, r3
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	4613      	mov	r3, r2
 8007192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007196:	2100      	movs	r1, #0
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f864 	bl	8007266 <USBH_GetDescriptor>
 800719e:	4603      	mov	r3, r0
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071b4:	78fa      	ldrb	r2, [r7, #3]
 80071b6:	b292      	uxth	r2, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	f000 f918 	bl	80073ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	331c      	adds	r3, #28
 80071d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e4:	2100      	movs	r1, #0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f83d 	bl	8007266 <USBH_GetDescriptor>
 80071ec:	4603      	mov	r3, r0
 80071ee:	72fb      	strb	r3, [r7, #11]
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071fc:	887a      	ldrh	r2, [r7, #2]
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f964 	bl	80074ce <USBH_ParseCfgDesc>
  }

  return status;
 8007206:	7afb      	ldrb	r3, [r7, #11]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af02      	add	r7, sp, #8
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	461a      	mov	r2, r3
 800721c:	460b      	mov	r3, r1
 800721e:	72fb      	strb	r3, [r7, #11]
 8007220:	4613      	mov	r3, r2
 8007222:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800722c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007234:	893b      	ldrh	r3, [r7, #8]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	460b      	mov	r3, r1
 800723a:	2100      	movs	r1, #0
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f812 	bl	8007266 <USBH_GetDescriptor>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007252:	893a      	ldrh	r2, [r7, #8]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fa37 	bl	80076ca <USBH_ParseStringDesc>
  }

  return status;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	72fb      	strb	r3, [r7, #11]
 8007274:	4613      	mov	r3, r2
 8007276:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	789b      	ldrb	r3, [r3, #2]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d11c      	bne.n	80072ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2206      	movs	r2, #6
 8007290:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	893a      	ldrh	r2, [r7, #8]
 8007296:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007298:	893b      	ldrh	r3, [r7, #8]
 800729a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800729e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a2:	d104      	bne.n	80072ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f240 4209 	movw	r2, #1033	; 0x409
 80072aa:	829a      	strh	r2, [r3, #20]
 80072ac:	e002      	b.n	80072b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8b3a      	ldrh	r2, [r7, #24]
 80072b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80072ba:	8b3b      	ldrh	r3, [r7, #24]
 80072bc:	461a      	mov	r2, r3
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fa50 	bl	8007766 <USBH_CtlReq>
 80072c6:	4603      	mov	r3, r0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	789b      	ldrb	r3, [r3, #2]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d10f      	bne.n	8007304 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2205      	movs	r2, #5
 80072ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fa2c 	bl	8007766 <USBH_CtlReq>
 800730e:	4603      	mov	r3, r0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	789b      	ldrb	r3, [r3, #2]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d10e      	bne.n	800734a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2209      	movs	r2, #9
 8007336:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	887a      	ldrh	r2, [r7, #2]
 800733c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800734a:	2200      	movs	r2, #0
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa09 	bl	8007766 <USBH_CtlReq>
 8007354:	4603      	mov	r3, r0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	789b      	ldrb	r3, [r3, #2]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10f      	bne.n	8007392 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2203      	movs	r2, #3
 800737c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9e5 	bl	8007766 <USBH_CtlReq>
 800739c:	4603      	mov	r3, r0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	789b      	ldrb	r3, [r3, #2]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d10f      	bne.n	80073da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f9c1 	bl	8007766 <USBH_CtlReq>
 80073e4:	4603      	mov	r3, r0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	785a      	ldrb	r2, [r3, #1]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3302      	adds	r3, #2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b29a      	uxth	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	3303      	adds	r3, #3
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	b29b      	uxth	r3, r3
 8007420:	4313      	orrs	r3, r2
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	791a      	ldrb	r2, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	795a      	ldrb	r2, [r3, #5]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	799a      	ldrb	r2, [r3, #6]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	79da      	ldrb	r2, [r3, #7]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	2b08      	cmp	r3, #8
 800744c:	d939      	bls.n	80074c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	3308      	adds	r3, #8
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b29a      	uxth	r2, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	3309      	adds	r3, #9
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	b29b      	uxth	r3, r3
 8007462:	4313      	orrs	r3, r2
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	330a      	adds	r3, #10
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	330b      	adds	r3, #11
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	b29b      	uxth	r3, r3
 800747e:	4313      	orrs	r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	330c      	adds	r3, #12
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	330d      	adds	r3, #13
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b29b      	uxth	r3, r3
 800749a:	4313      	orrs	r3, r2
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	7b9a      	ldrb	r2, [r3, #14]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	7bda      	ldrb	r2, [r3, #15]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7c1a      	ldrb	r2, [r3, #16]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	7c5a      	ldrb	r2, [r3, #17]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	745a      	strb	r2, [r3, #17]
  }
}
 80074c2:	bf00      	nop
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b08a      	sub	sp, #40	; 0x28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	785a      	ldrb	r2, [r3, #1]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	3302      	adds	r3, #2
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b29a      	uxth	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	3303      	adds	r3, #3
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	b29b      	uxth	r3, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	791a      	ldrb	r2, [r3, #4]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	795a      	ldrb	r2, [r3, #5]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	799a      	ldrb	r2, [r3, #6]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	79da      	ldrb	r2, [r3, #7]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	7a1a      	ldrb	r2, [r3, #8]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b09      	cmp	r3, #9
 8007548:	d95f      	bls.n	800760a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800754a:	2309      	movs	r3, #9
 800754c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007552:	e051      	b.n	80075f8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007554:	f107 0316 	add.w	r3, r7, #22
 8007558:	4619      	mov	r1, r3
 800755a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755c:	f000 f8e8 	bl	8007730 <USBH_GetNextDesc>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b04      	cmp	r3, #4
 8007568:	d146      	bne.n	80075f8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800756a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800756e:	221a      	movs	r2, #26
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	3308      	adds	r3, #8
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	3302      	adds	r3, #2
 800757c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800757e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007580:	69f8      	ldr	r0, [r7, #28]
 8007582:	f000 f846 	bl	8007612 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007590:	e022      	b.n	80075d8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007592:	f107 0316 	add.w	r3, r7, #22
 8007596:	4619      	mov	r1, r3
 8007598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800759a:	f000 f8c9 	bl	8007730 <USBH_GetNextDesc>
 800759e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b05      	cmp	r3, #5
 80075a6:	d117      	bne.n	80075d8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80075a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075b0:	3201      	adds	r2, #1
 80075b2:	00d2      	lsls	r2, r2, #3
 80075b4:	211a      	movs	r1, #26
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	3308      	adds	r3, #8
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	3304      	adds	r3, #4
 80075c4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80075c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c8:	69b8      	ldr	r0, [r7, #24]
 80075ca:	f000 f851 	bl	8007670 <USBH_ParseEPDesc>
            ep_ix++;
 80075ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075d2:	3301      	adds	r3, #1
 80075d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	791b      	ldrb	r3, [r3, #4]
 80075dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d204      	bcs.n	80075ee <USBH_ParseCfgDesc+0x120>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	885a      	ldrh	r2, [r3, #2]
 80075e8:	8afb      	ldrh	r3, [r7, #22]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d8d1      	bhi.n	8007592 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80075ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f2:	3301      	adds	r3, #1
 80075f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d804      	bhi.n	800760a <USBH_ParseCfgDesc+0x13c>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	885a      	ldrh	r2, [r3, #2]
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	429a      	cmp	r2, r3
 8007608:	d8a4      	bhi.n	8007554 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800760a:	bf00      	nop
 800760c:	3728      	adds	r7, #40	; 0x28
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	785a      	ldrb	r2, [r3, #1]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	789a      	ldrb	r2, [r3, #2]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	78da      	ldrb	r2, [r3, #3]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	791a      	ldrb	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	795a      	ldrb	r2, [r3, #5]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	799a      	ldrb	r2, [r3, #6]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	79da      	ldrb	r2, [r3, #7]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	7a1a      	ldrb	r2, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	721a      	strb	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	785a      	ldrb	r2, [r3, #1]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	789a      	ldrb	r2, [r3, #2]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	78da      	ldrb	r2, [r3, #3]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	3304      	adds	r3, #4
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	3305      	adds	r3, #5
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	799a      	ldrb	r2, [r3, #6]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	719a      	strb	r2, [r3, #6]
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b087      	sub	sp, #28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	4613      	mov	r3, r2
 80076d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d120      	bne.n	8007724 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	1e9a      	subs	r2, r3, #2
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	bf28      	it	cs
 80076ee:	4613      	movcs	r3, r2
 80076f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3302      	adds	r3, #2
 80076f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076f8:	2300      	movs	r3, #0
 80076fa:	82fb      	strh	r3, [r7, #22]
 80076fc:	e00b      	b.n	8007716 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076fe:	8afb      	ldrh	r3, [r7, #22]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	701a      	strb	r2, [r3, #0]
      pdest++;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3301      	adds	r3, #1
 800770e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007710:	8afb      	ldrh	r3, [r7, #22]
 8007712:	3302      	adds	r3, #2
 8007714:	82fb      	strh	r3, [r7, #22]
 8007716:	8afa      	ldrh	r2, [r7, #22]
 8007718:	8abb      	ldrh	r3, [r7, #20]
 800771a:	429a      	cmp	r2, r3
 800771c:	d3ef      	bcc.n	80076fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
  }
}
 8007724:	bf00      	nop
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	4413      	add	r3, r2
 8007746:	b29a      	uxth	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	4613      	mov	r3, r2
 8007772:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007774:	2301      	movs	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	789b      	ldrb	r3, [r3, #2]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d002      	beq.n	8007786 <USBH_CtlReq+0x20>
 8007780:	2b02      	cmp	r3, #2
 8007782:	d00f      	beq.n	80077a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007784:	e027      	b.n	80077d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2202      	movs	r2, #2
 800779c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800779e:	2301      	movs	r3, #1
 80077a0:	75fb      	strb	r3, [r7, #23]
      break;
 80077a2:	e018      	b.n	80077d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f81b 	bl	80077e0 <USBH_HandleControl>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <USBH_CtlReq+0x54>
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d106      	bne.n	80077c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	761a      	strb	r2, [r3, #24]
      break;
 80077c6:	e005      	b.n	80077d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d102      	bne.n	80077d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	709a      	strb	r2, [r3, #2]
      break;
 80077d4:	bf00      	nop
  }
  return status;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7e1b      	ldrb	r3, [r3, #24]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b0a      	cmp	r3, #10
 80077f8:	f200 8158 	bhi.w	8007aac <USBH_HandleControl+0x2cc>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <USBH_HandleControl+0x24>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007831 	.word	0x08007831
 8007808:	0800784b 	.word	0x0800784b
 800780c:	080078b5 	.word	0x080078b5
 8007810:	080078db 	.word	0x080078db
 8007814:	08007913 	.word	0x08007913
 8007818:	0800793f 	.word	0x0800793f
 800781c:	08007991 	.word	0x08007991
 8007820:	080079b3 	.word	0x080079b3
 8007824:	080079ef 	.word	0x080079ef
 8007828:	08007a17 	.word	0x08007a17
 800782c:	08007a55 	.word	0x08007a55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f103 0110 	add.w	r1, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	461a      	mov	r2, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f945 	bl	8007acc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	761a      	strb	r2, [r3, #24]
      break;
 8007848:	e13b      	b.n	8007ac2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	795b      	ldrb	r3, [r3, #5]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fcc5 	bl	80081e0 <USBH_LL_GetURBState>
 8007856:	4603      	mov	r3, r0
 8007858:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d11e      	bne.n	800789e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7c1b      	ldrb	r3, [r3, #16]
 8007864:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007868:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8adb      	ldrh	r3, [r3, #22]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007872:	7b7b      	ldrb	r3, [r7, #13]
 8007874:	2b80      	cmp	r3, #128	; 0x80
 8007876:	d103      	bne.n	8007880 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2203      	movs	r2, #3
 800787c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800787e:	e117      	b.n	8007ab0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2205      	movs	r2, #5
 8007884:	761a      	strb	r2, [r3, #24]
      break;
 8007886:	e113      	b.n	8007ab0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007888:	7b7b      	ldrb	r3, [r7, #13]
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d103      	bne.n	8007896 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2209      	movs	r2, #9
 8007892:	761a      	strb	r2, [r3, #24]
      break;
 8007894:	e10c      	b.n	8007ab0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2207      	movs	r2, #7
 800789a:	761a      	strb	r2, [r3, #24]
      break;
 800789c:	e108      	b.n	8007ab0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d003      	beq.n	80078ac <USBH_HandleControl+0xcc>
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	f040 8102 	bne.w	8007ab0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	220b      	movs	r2, #11
 80078b0:	761a      	strb	r2, [r3, #24]
      break;
 80078b2:	e0fd      	b.n	8007ab0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6899      	ldr	r1, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	899a      	ldrh	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	791b      	ldrb	r3, [r3, #4]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f93c 	bl	8007b4a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2204      	movs	r2, #4
 80078d6:	761a      	strb	r2, [r3, #24]
      break;
 80078d8:	e0f3      	b.n	8007ac2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc7d 	bl	80081e0 <USBH_LL_GetURBState>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d102      	bne.n	80078f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2209      	movs	r2, #9
 80078f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d102      	bne.n	8007902 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078fc:	2303      	movs	r3, #3
 80078fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007900:	e0d8      	b.n	8007ab4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b04      	cmp	r3, #4
 8007906:	f040 80d5 	bne.w	8007ab4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	220b      	movs	r2, #11
 800790e:	761a      	strb	r2, [r3, #24]
      break;
 8007910:	e0d0      	b.n	8007ab4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6899      	ldr	r1, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	899a      	ldrh	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7958      	ldrb	r0, [r3, #5]
 800791e:	2301      	movs	r3, #1
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	4603      	mov	r3, r0
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8eb 	bl	8007b00 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2206      	movs	r2, #6
 800793a:	761a      	strb	r2, [r3, #24]
      break;
 800793c:	e0c1      	b.n	8007ac2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	795b      	ldrb	r3, [r3, #5]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fc4b 	bl	80081e0 <USBH_LL_GetURBState>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d103      	bne.n	800795c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2207      	movs	r2, #7
 8007958:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800795a:	e0ad      	b.n	8007ab8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b05      	cmp	r3, #5
 8007960:	d105      	bne.n	800796e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	220c      	movs	r2, #12
 8007966:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007968:	2303      	movs	r3, #3
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	e0a4      	b.n	8007ab8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d103      	bne.n	800797c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2205      	movs	r2, #5
 8007978:	761a      	strb	r2, [r3, #24]
      break;
 800797a:	e09d      	b.n	8007ab8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b04      	cmp	r3, #4
 8007980:	f040 809a 	bne.w	8007ab8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	220b      	movs	r2, #11
 8007988:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800798a:	2302      	movs	r3, #2
 800798c:	73fb      	strb	r3, [r7, #15]
      break;
 800798e:	e093      	b.n	8007ab8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8d6 	bl	8007b4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2208      	movs	r2, #8
 80079ae:	761a      	strb	r2, [r3, #24]

      break;
 80079b0:	e087      	b.n	8007ac2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	791b      	ldrb	r3, [r3, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fc11 	bl	80081e0 <USBH_LL_GetURBState>
 80079be:	4603      	mov	r3, r0
 80079c0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d105      	bne.n	80079d4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	220d      	movs	r2, #13
 80079cc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079d2:	e073      	b.n	8007abc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d103      	bne.n	80079e2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	220b      	movs	r2, #11
 80079de:	761a      	strb	r2, [r3, #24]
      break;
 80079e0:	e06c      	b.n	8007abc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d169      	bne.n	8007abc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
      break;
 80079ec:	e066      	b.n	8007abc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	795a      	ldrb	r2, [r3, #5]
 80079f2:	2301      	movs	r3, #1
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f87f 	bl	8007b00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	220a      	movs	r2, #10
 8007a12:	761a      	strb	r2, [r3, #24]
      break;
 8007a14:	e055      	b.n	8007ac2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	795b      	ldrb	r3, [r3, #5]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fbdf 	bl	80081e0 <USBH_LL_GetURBState>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d105      	bne.n	8007a38 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	220d      	movs	r2, #13
 8007a34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a36:	e043      	b.n	8007ac0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d103      	bne.n	8007a46 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2209      	movs	r2, #9
 8007a42:	761a      	strb	r2, [r3, #24]
      break;
 8007a44:	e03c      	b.n	8007ac0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d139      	bne.n	8007ac0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220b      	movs	r2, #11
 8007a50:	761a      	strb	r2, [r3, #24]
      break;
 8007a52:	e035      	b.n	8007ac0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	7e5b      	ldrb	r3, [r3, #25]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	765a      	strb	r2, [r3, #25]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7e5b      	ldrb	r3, [r3, #25]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d806      	bhi.n	8007a76 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a74:	e025      	b.n	8007ac2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a7c:	2106      	movs	r1, #6
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	795b      	ldrb	r3, [r3, #5]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f90c 	bl	8007cac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	791b      	ldrb	r3, [r3, #4]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f906 	bl	8007cac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aaa:	e00a      	b.n	8007ac2 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007aac:	bf00      	nop
 8007aae:	e008      	b.n	8007ac2 <USBH_HandleControl+0x2e2>
      break;
 8007ab0:	bf00      	nop
 8007ab2:	e006      	b.n	8007ac2 <USBH_HandleControl+0x2e2>
      break;
 8007ab4:	bf00      	nop
 8007ab6:	e004      	b.n	8007ac2 <USBH_HandleControl+0x2e2>
      break;
 8007ab8:	bf00      	nop
 8007aba:	e002      	b.n	8007ac2 <USBH_HandleControl+0x2e2>
      break;
 8007abc:	bf00      	nop
 8007abe:	e000      	b.n	8007ac2 <USBH_HandleControl+0x2e2>
      break;
 8007ac0:	bf00      	nop
  }

  return status;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af04      	add	r7, sp, #16
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ada:	79f9      	ldrb	r1, [r7, #7]
 8007adc:	2300      	movs	r3, #0
 8007ade:	9303      	str	r3, [sp, #12]
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	9302      	str	r3, [sp, #8]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	2300      	movs	r3, #0
 8007aee:	2200      	movs	r2, #0
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fb44 	bl	800817e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af04      	add	r7, sp, #16
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	460b      	mov	r3, r1
 8007b10:	80fb      	strh	r3, [r7, #6]
 8007b12:	4613      	mov	r3, r2
 8007b14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b24:	7979      	ldrb	r1, [r7, #5]
 8007b26:	7e3b      	ldrb	r3, [r7, #24]
 8007b28:	9303      	str	r3, [sp, #12]
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	2301      	movs	r3, #1
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	2200      	movs	r2, #0
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 fb1f 	bl	800817e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b088      	sub	sp, #32
 8007b4e:	af04      	add	r7, sp, #16
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	4611      	mov	r1, r2
 8007b56:	461a      	mov	r2, r3
 8007b58:	460b      	mov	r3, r1
 8007b5a:	80fb      	strh	r3, [r7, #6]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b60:	7979      	ldrb	r1, [r7, #5]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9303      	str	r3, [sp, #12]
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	9302      	str	r3, [sp, #8]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	2301      	movs	r3, #1
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	2300      	movs	r3, #0
 8007b74:	2201      	movs	r2, #1
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fb01 	bl	800817e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b7c:	2300      	movs	r3, #0

}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b088      	sub	sp, #32
 8007b8a:	af04      	add	r7, sp, #16
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	4611      	mov	r1, r2
 8007b92:	461a      	mov	r2, r3
 8007b94:	460b      	mov	r3, r1
 8007b96:	80fb      	strh	r3, [r7, #6]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007baa:	7979      	ldrb	r1, [r7, #5]
 8007bac:	7e3b      	ldrb	r3, [r7, #24]
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	88fb      	ldrh	r3, [r7, #6]
 8007bb2:	9302      	str	r3, [sp, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	2301      	movs	r3, #1
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fadc 	bl	800817e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4611      	mov	r1, r2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	460b      	mov	r3, r1
 8007be0:	80fb      	strh	r3, [r7, #6]
 8007be2:	4613      	mov	r3, r2
 8007be4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007be6:	7979      	ldrb	r1, [r7, #5]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fabe 	bl	800817e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af04      	add	r7, sp, #16
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	4608      	mov	r0, r1
 8007c16:	4611      	mov	r1, r2
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	70fb      	strb	r3, [r7, #3]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70bb      	strb	r3, [r7, #2]
 8007c22:	4613      	mov	r3, r2
 8007c24:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c26:	7878      	ldrb	r0, [r7, #1]
 8007c28:	78ba      	ldrb	r2, [r7, #2]
 8007c2a:	78f9      	ldrb	r1, [r7, #3]
 8007c2c:	8b3b      	ldrh	r3, [r7, #24]
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	7d3b      	ldrb	r3, [r7, #20]
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	7c3b      	ldrb	r3, [r7, #16]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	4603      	mov	r3, r0
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa51 	bl	80080e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa70 	bl	8008140 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f836 	bl	8007ce8 <USBH_GetFreePipe>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c80:	89fb      	ldrh	r3, [r7, #14]
 8007c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00a      	beq.n	8007ca0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	89fb      	ldrh	r3, [r7, #14]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	33e0      	adds	r3, #224	; 0xe0
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007ca0:	89fb      	ldrh	r3, [r7, #14]
 8007ca2:	b2db      	uxtb	r3, r3
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	2b0a      	cmp	r3, #10
 8007cbc:	d80d      	bhi.n	8007cda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	33e0      	adds	r3, #224	; 0xe0
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	33e0      	adds	r3, #224	; 0xe0
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e00f      	b.n	8007d1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	33e0      	adds	r3, #224	; 0xe0
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	e007      	b.n	8007d24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	3301      	adds	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b0a      	cmp	r3, #10
 8007d1e:	d9ec      	bls.n	8007cfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d34:	2201      	movs	r2, #1
 8007d36:	490e      	ldr	r1, [pc, #56]	; (8007d70 <MX_USB_HOST_Init+0x40>)
 8007d38:	480e      	ldr	r0, [pc, #56]	; (8007d74 <MX_USB_HOST_Init+0x44>)
 8007d3a:	f7fe fc9f 	bl	800667c <USBH_Init>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d44:	f7f8 fec8 	bl	8000ad8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d48:	490b      	ldr	r1, [pc, #44]	; (8007d78 <MX_USB_HOST_Init+0x48>)
 8007d4a:	480a      	ldr	r0, [pc, #40]	; (8007d74 <MX_USB_HOST_Init+0x44>)
 8007d4c:	f7fe fd24 	bl	8006798 <USBH_RegisterClass>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d56:	f7f8 febf 	bl	8000ad8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d5a:	4806      	ldr	r0, [pc, #24]	; (8007d74 <MX_USB_HOST_Init+0x44>)
 8007d5c:	f7fe fda8 	bl	80068b0 <USBH_Start>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d66:	f7f8 feb7 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d6a:	bf00      	nop
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	08007d91 	.word	0x08007d91
 8007d74:	20000200 	.word	0x20000200
 8007d78:	20000010 	.word	0x20000010

08007d7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d80:	4802      	ldr	r0, [pc, #8]	; (8007d8c <MX_USB_HOST_Process+0x10>)
 8007d82:	f7fe fda5 	bl	80068d0 <USBH_Process>
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000200 	.word	0x20000200

08007d90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d819      	bhi.n	8007dd8 <USBH_UserProcess+0x48>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <USBH_UserProcess+0x1c>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007dd1 	.word	0x08007dd1
 8007dbc:	08007dc1 	.word	0x08007dc1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007dc0:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <USBH_UserProcess+0x58>)
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	701a      	strb	r2, [r3, #0]
  break;
 8007dc6:	e008      	b.n	8007dda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007dc8:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <USBH_UserProcess+0x58>)
 8007dca:	2202      	movs	r2, #2
 8007dcc:	701a      	strb	r2, [r3, #0]
  break;
 8007dce:	e004      	b.n	8007dda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <USBH_UserProcess+0x58>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	701a      	strb	r2, [r3, #0]
  break;
 8007dd6:	e000      	b.n	8007dda <USBH_UserProcess+0x4a>

  default:
  break;
 8007dd8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	200000bc 	.word	0x200000bc

08007dec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	; 0x28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007df4:	f107 0314 	add.w	r3, r7, #20
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	605a      	str	r2, [r3, #4]
 8007dfe:	609a      	str	r2, [r3, #8]
 8007e00:	60da      	str	r2, [r3, #12]
 8007e02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e0c:	d147      	bne.n	8007e9e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	4b25      	ldr	r3, [pc, #148]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	4a24      	ldr	r2, [pc, #144]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e1e:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	481b      	ldr	r0, [pc, #108]	; (8007eac <HAL_HCD_MspInit+0xc0>)
 8007e40:	f7f9 fa02 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e52:	2300      	movs	r3, #0
 8007e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e56:	230a      	movs	r3, #10
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e5a:	f107 0314 	add.w	r3, r7, #20
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4812      	ldr	r0, [pc, #72]	; (8007eac <HAL_HCD_MspInit+0xc0>)
 8007e62:	f7f9 f9f1 	bl	8001248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e66:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	4a0f      	ldr	r2, [pc, #60]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e70:	6353      	str	r3, [r2, #52]	; 0x34
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7a:	4a0b      	ldr	r2, [pc, #44]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e80:	6453      	str	r3, [r2, #68]	; 0x44
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <HAL_HCD_MspInit+0xbc>)
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	2043      	movs	r0, #67	; 0x43
 8007e94:	f7f9 f9a1 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e98:	2043      	movs	r0, #67	; 0x43
 8007e9a:	f7f9 f9ba 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3728      	adds	r7, #40	; 0x28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	40020000 	.word	0x40020000

08007eb0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff f8d9 	bl	8007076 <USBH_LL_IncTimer>
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff f911 	bl	8007102 <USBH_LL_Connect>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff f91a 	bl	8007130 <USBH_LL_Disconnect>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
 8007f10:	4613      	mov	r3, r2
 8007f12:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff f8cb 	bl	80070ca <USBH_LL_PortEnabled>
} 
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff f8cb 	bl	80070e6 <USBH_LL_PortDisabled>
} 
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d12a      	bne.n	8007fc0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f6a:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f84:	2208      	movs	r2, #8
 8007f86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f88:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f94:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f96:	2202      	movs	r2, #2
 8007f98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <USBH_LL_Init+0x74>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007fa0:	480a      	ldr	r0, [pc, #40]	; (8007fcc <USBH_LL_Init+0x74>)
 8007fa2:	f7f9 fb1c 	bl	80015de <HAL_HCD_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007fac:	f7f8 fd94 	bl	8000ad8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007fb0:	4806      	ldr	r0, [pc, #24]	; (8007fcc <USBH_LL_Init+0x74>)
 8007fb2:	f7f9 ff1f 	bl	8001df4 <HAL_HCD_GetCurrentFrame>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff f84c 	bl	8007058 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200005d8 	.word	0x200005d8

08007fd0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f9 fe8c 	bl	8001d04 <HAL_HCD_Start>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f95c 	bl	80082b0 <USBH_Get_USB_Status>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800801c:	4618      	mov	r0, r3
 800801e:	f7f9 fe94 	bl	8001d4a <HAL_HCD_Stop>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	4618      	mov	r0, r3
 800802a:	f000 f941 	bl	80082b0 <USBH_Get_USB_Status>
 800802e:	4603      	mov	r3, r0
 8008030:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008032:	7bbb      	ldrb	r3, [r7, #14]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008044:	2301      	movs	r3, #1
 8008046:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800804e:	4618      	mov	r0, r3
 8008050:	f7f9 fede 	bl	8001e10 <HAL_HCD_GetCurrentSpeed>
 8008054:	4603      	mov	r3, r0
 8008056:	2b01      	cmp	r3, #1
 8008058:	d007      	beq.n	800806a <USBH_LL_GetSpeed+0x2e>
 800805a:	2b01      	cmp	r3, #1
 800805c:	d302      	bcc.n	8008064 <USBH_LL_GetSpeed+0x28>
 800805e:	2b02      	cmp	r3, #2
 8008060:	d006      	beq.n	8008070 <USBH_LL_GetSpeed+0x34>
 8008062:	e008      	b.n	8008076 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
    break;
 8008068:	e008      	b.n	800807c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800806a:	2301      	movs	r3, #1
 800806c:	73fb      	strb	r3, [r7, #15]
    break;
 800806e:	e005      	b.n	800807c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008070:	2302      	movs	r3, #2
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e002      	b.n	800807c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008076:	2301      	movs	r3, #1
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	bf00      	nop
  }
  return  speed;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800809c:	4618      	mov	r0, r3
 800809e:	f7f9 fe71 	bl	8001d84 <HAL_HCD_ResetPort>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f901 	bl	80082b0 <USBH_Get_USB_Status>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ce:	78fa      	ldrb	r2, [r7, #3]
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f9 fe79 	bl	8001dca <HAL_HCD_HC_GetXferCount>
 80080d8:	4603      	mov	r3, r0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080e2:	b590      	push	{r4, r7, lr}
 80080e4:	b089      	sub	sp, #36	; 0x24
 80080e6:	af04      	add	r7, sp, #16
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	461a      	mov	r2, r3
 80080f0:	4603      	mov	r3, r0
 80080f2:	70fb      	strb	r3, [r7, #3]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70bb      	strb	r3, [r7, #2]
 80080f8:	4613      	mov	r3, r2
 80080fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800810a:	787c      	ldrb	r4, [r7, #1]
 800810c:	78ba      	ldrb	r2, [r7, #2]
 800810e:	78f9      	ldrb	r1, [r7, #3]
 8008110:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008112:	9302      	str	r3, [sp, #8]
 8008114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4623      	mov	r3, r4
 8008122:	f7f9 fabe 	bl	80016a2 <HAL_HCD_HC_Init>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f8bf 	bl	80082b0 <USBH_Get_USB_Status>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008136:	7bbb      	ldrb	r3, [r7, #14]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bd90      	pop	{r4, r7, pc}

08008140 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f7f9 fb37 	bl	80017d2 <HAL_HCD_HC_Halt>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f8a0 	bl	80082b0 <USBH_Get_USB_Status>
 8008170:	4603      	mov	r3, r0
 8008172:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008174:	7bbb      	ldrb	r3, [r7, #14]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800817e:	b590      	push	{r4, r7, lr}
 8008180:	b089      	sub	sp, #36	; 0x24
 8008182:	af04      	add	r7, sp, #16
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	461a      	mov	r2, r3
 800818c:	4603      	mov	r3, r0
 800818e:	70fb      	strb	r3, [r7, #3]
 8008190:	460b      	mov	r3, r1
 8008192:	70bb      	strb	r3, [r7, #2]
 8008194:	4613      	mov	r3, r2
 8008196:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081a6:	787c      	ldrb	r4, [r7, #1]
 80081a8:	78ba      	ldrb	r2, [r7, #2]
 80081aa:	78f9      	ldrb	r1, [r7, #3]
 80081ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081b0:	9303      	str	r3, [sp, #12]
 80081b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081b4:	9302      	str	r3, [sp, #8]
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4623      	mov	r3, r4
 80081c2:	f7f9 fb29 	bl	8001818 <HAL_HCD_HC_SubmitRequest>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 f86f 	bl	80082b0 <USBH_Get_USB_Status>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd90      	pop	{r4, r7, pc}

080081e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	4611      	mov	r1, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7f9 fdd2 	bl	8001da0 <HAL_HCD_HC_GetURBState>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008218:	2b01      	cmp	r3, #1
 800821a:	d103      	bne.n	8008224 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f872 	bl	8008308 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008224:	20c8      	movs	r0, #200	; 0xc8
 8008226:	f7f8 fedb 	bl	8000fe0 <HAL_Delay>
  return USBH_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
 8008240:	4613      	mov	r3, r2
 8008242:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	440b      	add	r3, r1
 800825a:	333b      	adds	r3, #59	; 0x3b
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	68f9      	ldr	r1, [r7, #12]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	440b      	add	r3, r1
 8008270:	3350      	adds	r3, #80	; 0x50
 8008272:	78ba      	ldrb	r2, [r7, #2]
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e009      	b.n	800828c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	440b      	add	r3, r1
 8008286:	3351      	adds	r3, #81	; 0x51
 8008288:	78ba      	ldrb	r2, [r7, #2]
 800828a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7f8 fe9c 	bl	8000fe0 <HAL_Delay>
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d817      	bhi.n	80082f4 <USBH_Get_USB_Status+0x44>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <USBH_Get_USB_Status+0x1c>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082e3 	.word	0x080082e3
 80082d4:	080082e9 	.word	0x080082e9
 80082d8:	080082ef 	.word	0x080082ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]
    break;
 80082e0:	e00b      	b.n	80082fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082e2:	2302      	movs	r3, #2
 80082e4:	73fb      	strb	r3, [r7, #15]
    break;
 80082e6:	e008      	b.n	80082fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082e8:	2301      	movs	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	e005      	b.n	80082fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	73fb      	strb	r3, [r7, #15]
    break;
 80082f2:	e002      	b.n	80082fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082f4:	2302      	movs	r3, #2
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	bf00      	nop
  }
  return usb_status;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	e001      	b.n	8008326 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	461a      	mov	r2, r3
 800832a:	2101      	movs	r1, #1
 800832c:	4803      	ldr	r0, [pc, #12]	; (800833c <MX_DriverVbusFS+0x34>)
 800832e:	f7f9 f93d 	bl	80015ac <HAL_GPIO_WritePin>
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	40020800 	.word	0x40020800

08008340 <__errno>:
 8008340:	4b01      	ldr	r3, [pc, #4]	; (8008348 <__errno+0x8>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000030 	.word	0x20000030

0800834c <__libc_init_array>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4e0d      	ldr	r6, [pc, #52]	; (8008384 <__libc_init_array+0x38>)
 8008350:	4c0d      	ldr	r4, [pc, #52]	; (8008388 <__libc_init_array+0x3c>)
 8008352:	1ba4      	subs	r4, r4, r6
 8008354:	10a4      	asrs	r4, r4, #2
 8008356:	2500      	movs	r5, #0
 8008358:	42a5      	cmp	r5, r4
 800835a:	d109      	bne.n	8008370 <__libc_init_array+0x24>
 800835c:	4e0b      	ldr	r6, [pc, #44]	; (800838c <__libc_init_array+0x40>)
 800835e:	4c0c      	ldr	r4, [pc, #48]	; (8008390 <__libc_init_array+0x44>)
 8008360:	f000 f8ea 	bl	8008538 <_init>
 8008364:	1ba4      	subs	r4, r4, r6
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	2500      	movs	r5, #0
 800836a:	42a5      	cmp	r5, r4
 800836c:	d105      	bne.n	800837a <__libc_init_array+0x2e>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008374:	4798      	blx	r3
 8008376:	3501      	adds	r5, #1
 8008378:	e7ee      	b.n	8008358 <__libc_init_array+0xc>
 800837a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800837e:	4798      	blx	r3
 8008380:	3501      	adds	r5, #1
 8008382:	e7f2      	b.n	800836a <__libc_init_array+0x1e>
 8008384:	08008574 	.word	0x08008574
 8008388:	08008574 	.word	0x08008574
 800838c:	08008574 	.word	0x08008574
 8008390:	08008578 	.word	0x08008578

08008394 <malloc>:
 8008394:	4b02      	ldr	r3, [pc, #8]	; (80083a0 <malloc+0xc>)
 8008396:	4601      	mov	r1, r0
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f000 b861 	b.w	8008460 <_malloc_r>
 800839e:	bf00      	nop
 80083a0:	20000030 	.word	0x20000030

080083a4 <free>:
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <free+0xc>)
 80083a6:	4601      	mov	r1, r0
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	f000 b80b 	b.w	80083c4 <_free_r>
 80083ae:	bf00      	nop
 80083b0:	20000030 	.word	0x20000030

080083b4 <memset>:
 80083b4:	4402      	add	r2, r0
 80083b6:	4603      	mov	r3, r0
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d100      	bne.n	80083be <memset+0xa>
 80083bc:	4770      	bx	lr
 80083be:	f803 1b01 	strb.w	r1, [r3], #1
 80083c2:	e7f9      	b.n	80083b8 <memset+0x4>

080083c4 <_free_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4605      	mov	r5, r0
 80083c8:	2900      	cmp	r1, #0
 80083ca:	d045      	beq.n	8008458 <_free_r+0x94>
 80083cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d0:	1f0c      	subs	r4, r1, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bfb8      	it	lt
 80083d6:	18e4      	addlt	r4, r4, r3
 80083d8:	f000 f8ac 	bl	8008534 <__malloc_lock>
 80083dc:	4a1f      	ldr	r2, [pc, #124]	; (800845c <_free_r+0x98>)
 80083de:	6813      	ldr	r3, [r2, #0]
 80083e0:	4610      	mov	r0, r2
 80083e2:	b933      	cbnz	r3, 80083f2 <_free_r+0x2e>
 80083e4:	6063      	str	r3, [r4, #4]
 80083e6:	6014      	str	r4, [r2, #0]
 80083e8:	4628      	mov	r0, r5
 80083ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ee:	f000 b8a2 	b.w	8008536 <__malloc_unlock>
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	d90c      	bls.n	8008410 <_free_r+0x4c>
 80083f6:	6821      	ldr	r1, [r4, #0]
 80083f8:	1862      	adds	r2, r4, r1
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bf04      	itt	eq
 80083fe:	681a      	ldreq	r2, [r3, #0]
 8008400:	685b      	ldreq	r3, [r3, #4]
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	bf04      	itt	eq
 8008406:	1852      	addeq	r2, r2, r1
 8008408:	6022      	streq	r2, [r4, #0]
 800840a:	6004      	str	r4, [r0, #0]
 800840c:	e7ec      	b.n	80083e8 <_free_r+0x24>
 800840e:	4613      	mov	r3, r2
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	b10a      	cbz	r2, 8008418 <_free_r+0x54>
 8008414:	42a2      	cmp	r2, r4
 8008416:	d9fa      	bls.n	800840e <_free_r+0x4a>
 8008418:	6819      	ldr	r1, [r3, #0]
 800841a:	1858      	adds	r0, r3, r1
 800841c:	42a0      	cmp	r0, r4
 800841e:	d10b      	bne.n	8008438 <_free_r+0x74>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	4401      	add	r1, r0
 8008424:	1858      	adds	r0, r3, r1
 8008426:	4282      	cmp	r2, r0
 8008428:	6019      	str	r1, [r3, #0]
 800842a:	d1dd      	bne.n	80083e8 <_free_r+0x24>
 800842c:	6810      	ldr	r0, [r2, #0]
 800842e:	6852      	ldr	r2, [r2, #4]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	4401      	add	r1, r0
 8008434:	6019      	str	r1, [r3, #0]
 8008436:	e7d7      	b.n	80083e8 <_free_r+0x24>
 8008438:	d902      	bls.n	8008440 <_free_r+0x7c>
 800843a:	230c      	movs	r3, #12
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	e7d3      	b.n	80083e8 <_free_r+0x24>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428a      	cmp	r2, r1
 8008446:	bf04      	itt	eq
 8008448:	6811      	ldreq	r1, [r2, #0]
 800844a:	6852      	ldreq	r2, [r2, #4]
 800844c:	6062      	str	r2, [r4, #4]
 800844e:	bf04      	itt	eq
 8008450:	1809      	addeq	r1, r1, r0
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	605c      	str	r4, [r3, #4]
 8008456:	e7c7      	b.n	80083e8 <_free_r+0x24>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	200000c0 	.word	0x200000c0

08008460 <_malloc_r>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	1ccd      	adds	r5, r1, #3
 8008464:	f025 0503 	bic.w	r5, r5, #3
 8008468:	3508      	adds	r5, #8
 800846a:	2d0c      	cmp	r5, #12
 800846c:	bf38      	it	cc
 800846e:	250c      	movcc	r5, #12
 8008470:	2d00      	cmp	r5, #0
 8008472:	4606      	mov	r6, r0
 8008474:	db01      	blt.n	800847a <_malloc_r+0x1a>
 8008476:	42a9      	cmp	r1, r5
 8008478:	d903      	bls.n	8008482 <_malloc_r+0x22>
 800847a:	230c      	movs	r3, #12
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	2000      	movs	r0, #0
 8008480:	bd70      	pop	{r4, r5, r6, pc}
 8008482:	f000 f857 	bl	8008534 <__malloc_lock>
 8008486:	4a21      	ldr	r2, [pc, #132]	; (800850c <_malloc_r+0xac>)
 8008488:	6814      	ldr	r4, [r2, #0]
 800848a:	4621      	mov	r1, r4
 800848c:	b991      	cbnz	r1, 80084b4 <_malloc_r+0x54>
 800848e:	4c20      	ldr	r4, [pc, #128]	; (8008510 <_malloc_r+0xb0>)
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	b91b      	cbnz	r3, 800849c <_malloc_r+0x3c>
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f83d 	bl	8008514 <_sbrk_r>
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f838 	bl	8008514 <_sbrk_r>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d124      	bne.n	80084f2 <_malloc_r+0x92>
 80084a8:	230c      	movs	r3, #12
 80084aa:	6033      	str	r3, [r6, #0]
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 f842 	bl	8008536 <__malloc_unlock>
 80084b2:	e7e4      	b.n	800847e <_malloc_r+0x1e>
 80084b4:	680b      	ldr	r3, [r1, #0]
 80084b6:	1b5b      	subs	r3, r3, r5
 80084b8:	d418      	bmi.n	80084ec <_malloc_r+0x8c>
 80084ba:	2b0b      	cmp	r3, #11
 80084bc:	d90f      	bls.n	80084de <_malloc_r+0x7e>
 80084be:	600b      	str	r3, [r1, #0]
 80084c0:	50cd      	str	r5, [r1, r3]
 80084c2:	18cc      	adds	r4, r1, r3
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 f836 	bl	8008536 <__malloc_unlock>
 80084ca:	f104 000b 	add.w	r0, r4, #11
 80084ce:	1d23      	adds	r3, r4, #4
 80084d0:	f020 0007 	bic.w	r0, r0, #7
 80084d4:	1ac3      	subs	r3, r0, r3
 80084d6:	d0d3      	beq.n	8008480 <_malloc_r+0x20>
 80084d8:	425a      	negs	r2, r3
 80084da:	50e2      	str	r2, [r4, r3]
 80084dc:	e7d0      	b.n	8008480 <_malloc_r+0x20>
 80084de:	428c      	cmp	r4, r1
 80084e0:	684b      	ldr	r3, [r1, #4]
 80084e2:	bf16      	itet	ne
 80084e4:	6063      	strne	r3, [r4, #4]
 80084e6:	6013      	streq	r3, [r2, #0]
 80084e8:	460c      	movne	r4, r1
 80084ea:	e7eb      	b.n	80084c4 <_malloc_r+0x64>
 80084ec:	460c      	mov	r4, r1
 80084ee:	6849      	ldr	r1, [r1, #4]
 80084f0:	e7cc      	b.n	800848c <_malloc_r+0x2c>
 80084f2:	1cc4      	adds	r4, r0, #3
 80084f4:	f024 0403 	bic.w	r4, r4, #3
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d005      	beq.n	8008508 <_malloc_r+0xa8>
 80084fc:	1a21      	subs	r1, r4, r0
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f808 	bl	8008514 <_sbrk_r>
 8008504:	3001      	adds	r0, #1
 8008506:	d0cf      	beq.n	80084a8 <_malloc_r+0x48>
 8008508:	6025      	str	r5, [r4, #0]
 800850a:	e7db      	b.n	80084c4 <_malloc_r+0x64>
 800850c:	200000c0 	.word	0x200000c0
 8008510:	200000c4 	.word	0x200000c4

08008514 <_sbrk_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4c06      	ldr	r4, [pc, #24]	; (8008530 <_sbrk_r+0x1c>)
 8008518:	2300      	movs	r3, #0
 800851a:	4605      	mov	r5, r0
 800851c:	4608      	mov	r0, r1
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	f7f8 fc80 	bl	8000e24 <_sbrk>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_sbrk_r+0x1a>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	b103      	cbz	r3, 800852e <_sbrk_r+0x1a>
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	2000089c 	.word	0x2000089c

08008534 <__malloc_lock>:
 8008534:	4770      	bx	lr

08008536 <__malloc_unlock>:
 8008536:	4770      	bx	lr

08008538 <_init>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr

08008544 <_fini>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr
